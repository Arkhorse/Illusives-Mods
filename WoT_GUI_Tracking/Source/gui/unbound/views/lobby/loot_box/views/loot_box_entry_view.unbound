(def layout LootBoxEntryView() entrance=true hideBeforeResolve=true
    (name = 'LootBoxEntryView')
    (macro LootBoxEntryViewModel)
    (scope
        (event evOnVideoLoaded)
        (event evOnCloseBtnClick)
        (event evOnBoxMouseOver)
        (event evOnBoxMouseOut)
        (event evOnBoxSelected)
        (event evOnDeliveryBounced)
        (event evOnContentFadedOut)
        (event evOnBoxTransitionEnd)
        (event evOnVideoScaleChanged)
        (event evOnDeliveryShowControls)

        (const TAB_MENU_GAP:number = 52px)
        (const TAB_MENU_GAP_SMALL:number = 27px)
        (const TAB_MENU_GAP_START_INDEX:number = 3)
        (const BOX_NAME_USUAL:str = 'newYear_usual')
        (const USUAL_EMPTY_LABEL:str = 'usual_empty')
        (const PREMIUM_EMPTY_LABEL:str = 'premium_empty')
        (const BOX_VIDEO_CHANGE_TIMESTAMP:dict = {
                'newYear_usual': {
                    'NewYear': 0.000,
                    'Oriental': 2.000,
                    'Fairytale': 4.000,
                    'Christmas': 6.000,
                    'premium_empty': 42.000
                },
                'NewYear': {
                    'newYear_usual': 1.000,
                    'Fairytale': 11.000,
                    'Christmas': 15.000,
                    'Oriental': 18.000,
                    'usual_empty': 35.000,
                    'premium_empty': 48.000
                },
                'Oriental': {
                    'newYear_usual': 3.000,
                    'NewYear': 10.000,
                    'Fairytale': 12.000,
                    'Christmas': 14.000,
                    'usual_empty': 41.000,
                    'premium_empty': 50.000
                },
                'Fairytale': {
                    'newYear_usual': 5.000,
                    'NewYear': 8.000,
                    'Christmas': 16.000,
                    'Oriental': 17.000,
                    'usual_empty': 37.000,
                    'premium_empty': 51.000
                },
                'Christmas': {
                    'newYear_usual': 7.000,
                    'NewYear': 9.000,
                    'Fairytale': 13.000,
                    'Oriental': 19.000,
                    'usual_empty': 39.000,
                    'premium_empty': 49.000
                },
                'usual_empty': {
                    'premium_empty': 32.000,
                    'NewYear': 34.000,
                    'Fairytale': 36.000,
                    'Christmas': 38.000,
                    'Oriental': 40.000
                },
                'premium_empty': {
                    'usual_empty': 33.000,
                    'newYear_usual': 43.000,
                    'NewYear': 44.000,
                    'Christmas': 45.000,
                    'Oriental': 46.000,
                    'Fairytale': 47.000
                }
            }
        )
        (const BOX_VIDEO_DELIVERY_BOUNCE_TIMESTAMP:dict = {
                'NewYear': 20.000,
                'Oriental': 23.000,
                'Fairytale': 26.000,
                'Christmas': 29.000
            }
        )
        (const HOVER_POSITIONS:dict = {
                'NewYear': [1, 52],
                'Oriental': [0, 60],
                'Fairytale': [1, 53],
                'Christmas': [1, 54],
                'newYear_usual': [-8, 133]
            }
        )

        (var bgScale:number = 1.1)
        (bind bgScale "$event.value" init=false
            (event "evOnVideoScaleChanged")
        )

        (var isInitialized:bool = false)
        (bind isInitialized true init=false
            (event "evOnVideoLoaded")
            (event "onVideoStarted")
        )
        (var isSmall:bool = false)
        (bind isSmall "viewSize.height < BASE_HEIGHT_900"
            (event "viewResized")
        )
        (var isSmallButtons:bool = "isSmall")

        (var selectedIndex:number = 0)
        (bind selectedIndex "$event.index" init=false
            (event "evOnBoxSelected")
        )
        (bind currentIndex "selectedIndex" init=false watch=false
            (event "onBoxSelected")
        )
        (var selectedLabel:str = null)
        (bind selectedLabel "boxTabs[selectedIndex].name" init=false
            (bind enabled "boxTabs.length > selectedIndex && (boxTabs[selectedIndex].infoCount > 0 && boxTabs[selectedIndex].isEnabled)")
        )
        (bind selectedLabel "boxTabs[selectedIndex].name == BOX_NAME_USUAL ? USUAL_EMPTY_LABEL : PREMIUM_EMPTY_LABEL" init=false
            (bind enabled "boxTabs.length > selectedIndex && (boxTabs[selectedIndex].infoCount == 0 || !boxTabs[selectedIndex].isEnabled)")
        )
        (bind selectedLabel "selectedBoxName == BOX_NAME_USUAL ? USUAL_EMPTY_LABEL : PREMIUM_EMPTY_LABEL" init=false watch=false
            (bind trigger "isEmptySwitch")
        )
        (var currentLabel:str = null)
        (bind currentLabel "boxTabs[currentIndex].name" init=false
            (bind enabled "boxTabs.length > currentIndex && (boxTabs[currentIndex].infoCount > 0 && boxTabs[currentIndex].isEnabled)")
        )
        (bind currentLabel "boxTabs[currentIndex].name == BOX_NAME_USUAL ? USUAL_EMPTY_LABEL : PREMIUM_EMPTY_LABEL" init=false
            (bind enabled "boxTabs.length > currentIndex && (boxTabs[currentIndex].infoCount == 0 || !boxTabs[currentIndex].isEnabled)")
        )
        (bind currentLabel "selectedBoxName == BOX_NAME_USUAL ? USUAL_EMPTY_LABEL : PREMIUM_EMPTY_LABEL" init=false watch=false
            (bind trigger "isEmptySwitch")
        )

        (var isDeliveryBouncing:bool = false)
        (bind isDeliveryBouncing true init=false
            (event "onVideoStopped")
        )
        (bind isDeliveryBouncing false init=false
            (event "evOnDeliveryBounced")
        )
        (var isBoxTransition:bool = false)
        (bind isBoxTransition true init=false
            (bind enabled "currentLabel != selectedLabel && (currentIndex != selectedIndex || currentLabel == PREMIUM_EMPTY_LABEL)" init=false)
        )
        (bind isBoxTransition false init=false
            (event "evOnBoxTransitionEnd")
        )

        (var viewAlpha:number = 0)
        (var videoAlpha:number = 0)
        (var videoViewAlpha:number = 0)
        (controller $Animation
            (bindcall stop
                (event "evOnCloseBtnClick")
            )
            (bindcall play
                to={viewAlpha:1}
                duration=0.4
                callbacks="{onComplete: onFadeInCompleted}"
                (bind enabled "isInitialized")
            )
            (bindcall play
                to={viewAlpha:0}
                duration=0.3
                callbacks="{onStart: onFadeOutStarted, onComplete: onWindowClose}"
                (event "evOnCloseBtnClick")
            )
            (bindcall play
                init=false
                to={videoAlpha:1}
                delay=0.4
                duration=0.8
                (bind enabled "isInitialized")
            )
            (bindcall play
                init=false
                to={videoViewAlpha:1}
                delay=0.3
                duration=0.5
                (bind enabled "isInitialized")
            )
            (bindcall play
                to={videoAlpha:0}
                duration=0.01
                (event "evOnCloseBtnClick")
            )
            (bindcall play
                to={videoViewAlpha:0}
                duration=0.01
                (event "evOnCloseBtnClick")
            )
        )

        (var lootBoxHoverAnimAlpha:number = 0)
        (controller $Animation
            (bindcall stop
                (event "evOnBoxMouseOver")
                (event "evOnBoxMouseOut")
            )
            (bindcall play
                to={lootBoxHoverAnimAlpha:1}
                duration=0.25
                easing="Easing.sine_in"
                (event "evOnBoxMouseOver")
            )
            (bindcall play
                to={lootBoxHoverAnimAlpha:0}
                duration=0.25
                easing="Easing.sine_out"
                (event "evOnBoxMouseOut")
            )
        )

        (var contentBlockAlpha:number = 1)
        (controller $Animation
            (bindcall stop
                (event "evOnBoxSelected")
            )
            (bindcall play
                to={contentBlockAlpha:0}
                duration=0.5
                callbacks="{onComplete: evOnContentFadedOut}"
                (event "evOnBoxSelected")
                (enabled = "currentIndex != selectedIndex")
            )
            (bindcall play
                to={contentBlockAlpha:1}
                duration=0.5
                (event "onBoxSelected")
            )
        )

        (var interfaceAlpha:number = 1)
        (controller $Animation
            (bindcall stop
                (event "onVideoStarted")
                (event "evOnDeliveryShowControls")
            )
            (bindcall play
                to={interfaceAlpha:0}
                duration=0.1
                (event "onVideoStarted")
            )
            (bindcall play
                to={interfaceAlpha:1}
                duration=0.4
                (event "evOnDeliveryShowControls")
            )
        )

        (var showQuestsButtons:bool = "selectedBoxName == BOX_NAME_USUAL")
        (var noBoxesAlpha:number = 0)
        (bind noBoxesAlpha "0" init=false
            (event "evOnBoxSelected")
        )
        (controller $Animation
            (bindcall stop
                (bind enabled "isOpenBoxBtnVisible")
            )
            (bindcall play
                to={noBoxesAlpha:1}
                delay=0.5
                duration=0.3
                (bind trigger "selectedBoxName")
                (bind trigger "isOpenBoxBtnVisible")
            )
        )

        (var isButtonsEnabled:bool = "currentIndex == selectedIndex && !isBoxTransition && !isDeliveryBouncing")
    )

    (exec "playSound(R.sounds.gui_lootbox_logistic_center_boxes_highlight_on())"
        (event "evOnBoxMouseOver")
    )
    (exec "playSound(R.sounds.gui_lootbox_logistic_center_boxes_highlight_off())"
        (event "evOnBoxMouseOut")
    )
    (exec "playSound(R.sounds.gui_lootbox_logistic_center_switch_paid_appear())"
        (event "onVideoStopped")
    )

    (style
        (macro FullSize)
        (bind alpha "viewAlpha")
        (align = "center|middle")
    )

    (dispatch onWindowClose on='escPressed'
        (enabled = "!isVideoPlaying")
    )
    (dispatch onBoxSelected args="{'tabName': boxTabs[selectedIndex].name}"
        (event "evOnContentFadedOut")
    )

    (block
        (name = 'bgBlock')
        (style
            (position = "absolute")
            (backgroundColor = 0xFF120A0D)
            (bind width "viewSize.width + 1"
                (event "viewResized")
            )
            (bind height "viewSize.height"
                (event "viewResized")
            )
            (left = -1)
        )
        (tabEnabled = true)
    )

    (element BackgroundVideoAnimation
        (name = 'lootBoxAnimation')
        (style
            (bind alpha "videoViewAlpha")
        )
        (scope
            (fitVideo = true)
            (bind videoAlpha "videoAlpha")
            (bind bufferLength "streamBufferLength")
            (bind idleSource "R.videos.lootboxes.idles[currentLabel]()" init=false)
            (mainSource = "R.videos.lootboxes.lootbox_entry()")
            (bind viewWidth "viewSize.width"
                (event "viewResized")
            )
            (bind viewHeight "viewSize.height"
                (event "viewResized")
            )
            (bind transitionStart "BOX_VIDEO_CHANGE_TIMESTAMP[currentLabel][selectedLabel]" init=false watch=false
                (bind enabled "isBoxTransition")
            )
            (bind transitionStart "BOX_VIDEO_DELIVERY_BOUNCE_TIMESTAMP[currentLabel]" init=false watch=false
                (bind enabled "isDeliveryBouncing")
            )
            (bind showTransition true init=false
                (bind enabled "isBoxTransition || isDeliveryBouncing")
            )
            (dispatch evOnVideoLoaded on='evMetaDataChanged'
                (enabled = "!isInitialized && !isVideoPlaying")
            )
            (dispatch evOnBoxTransitionEnd on='evOnTransitionEnd'
                (enabled = "isBoxTransition")
            )
            (dispatch evOnDeliveryBounced on='evOnTransitionEnd'
                (enabled = "isDeliveryBouncing")
            )
            (dispatch evOnDeliveryShowControls on='evOnKeyPointReached'
                (enabled = "isDeliveryBouncing")
            )
            (dispatch pauseVideoPlayback dir=2
                (bind enabled "!isClientFocused")
            )
            (dispatch resumeVideoPlayback dir=2
                (bind enabled "isClientFocused")
            )
            (dispatch onLoadError on='evLoadError')
        )
    )

    (swf
        (name = 'lootBoxHoverAnim')
        (style
            (position = absolute)
            (pivotX = 50%)
            (pivotY = 50%)
            (bind scaleX "bgScale")
            (bind scaleY "bgScale")
            (bind hcenter "HOVER_POSITIONS[selectedBoxName][0] * bgScale" init=false)
            (bind vcenter "HOVER_POSITIONS[selectedBoxName][1] * bgScale" init=false)
            (bind alpha "min(videoAlpha, lootBoxHoverAnimAlpha)")
            (blendMode = 'add')
        )
        (bind source "R.animations.ny['particles_' + selectedBoxName]()" init=false)
    )

    (block
        (name = 'contentBlock')
        (style
            (macro FullSize)
            (align = "center|middle")
            (backgroundColor = 0x0000ff00)
            (bind alpha "interfaceAlpha")
            (bind alpha "contentBlockAlpha" init=false
                (enabled = "!isVideoPlaying && !isDeliveryBouncing")
            )

        )
        (bind mouseChildren "isButtonsEnabled")

        (tf
            (name = 'titleTF')
            (class GrandTitleTextStyle)
            (style
                (position = absolute)
                (hcenter = 0px)
                (top = 40px)
            )
            (bind text "R.strings.lootboxes.entryView.title[selectedBoxName]()")
        )

        (block
            (name = 'boxHitArea')
            (style
                (position = absolute)
                (bind hcenter "(selectedBoxName == BOX_NAME_USUAL ? 4px : -10px) * bgScale" init=false)
                (bind vcenter "(selectedBoxName == BOX_NAME_USUAL ? 112px : 80px) * bgScale" init=false)
                (bind width "(selectedBoxName == BOX_NAME_USUAL ? 530px : 770px) * bgScale" init=false)
                (bind height "(selectedBoxName == BOX_NAME_USUAL ? 290px : 390px) * bgScale" init=false)
                (backgroundColor = 0x00ff0000)
            )
            (buttonMode = true)
            (bind visible "isOpenBoxBtnVisible")
            (dispatch evOnBoxMouseOver on='mouseOver')
            (dispatch evOnBoxMouseOut on='mouseOut')
            (exec "playSound(R.sounds.play())" on='click'
                (enabled = "$event.buttonIdx == MOUSE.LEFT && isViewAccessible")
            )
            (dispatch onOpenBoxHitAreaClick
                on='click'
                (enabled = "$event.buttonIdx == MOUSE.LEFT && isViewAccessible")
            )
        )

        (block
            (name = 'noBoxesInfoBlock')
            (class AbsPositionCenterStyle)
            (style
                (align = "center|middle")
                (bind alpha "noBoxesAlpha")
            )
            (bind visible "!isOpenBoxBtnVisible")
            (tf
                (name = 'noBoxTypeTF')
                (class SuperPromoTitleTextStyle)
                (text = "R.strings.lootboxes.entryView.noBoxes.title()")
            )
            (tf
                (name = 'howToGetTF')
                (class PromoSubTitleTextStyle)
                (style
                    (textColor = 0xBDBDBD)
                    (bind fontSize "isSmall ? 16 : 24")
                    (marginBottom = 16px)
                )
                (bind text "R.strings.lootboxes.entryView.howToGet[selectedBoxType]()")
            )
            (macro NYQuestsButtonsBlock)
        )

        (hblock
            (name = 'buttonsBlock')
            (style
                (position = absolute)
                (bottom = 67px)
                (bind hcenter "isOpenBoxBtnVisible ? -80 : 0")
                (gap = 15px)
                (align = "center|middle")
            )
            (button
                (name = 'openLootBoxOrangeBtn')
                (macro ButtonStyleMain "BUTTON_SIZE_LARGE")
                (style
                    (minWidth = 160px)
                )
                (label = "R.strings.lootboxes.buttonLabel.open()")
                (bind visible "isOpenBoxBtnVisible")
                (dispatch onOpenBoxBtnClick
                    on='clicked'
                )
                (dispatch evOnBoxMouseOver on='mouseOver')
                (dispatch evOnBoxMouseOut on='mouseOut')
                (setFocus)
                (bindcall setFocus
                    (bind enabled "isNeedSetFocus")
                )

                (bind enabled "isOpenBoxBtnVisible && isViewAccessible && isButtonsEnabled")
            )
            (button
                (name = 'buyLootBoxOrangeBtn')
                (macro ButtonStyleMain "BUTTON_SIZE_LARGE")
                (style
                    (minWidth = 160px)
                )
                (label = "R.strings.lootboxes.buttonLabel.buyMore()")
                (bind visible "isBuyBoxBtnVisible")
                (dispatch onBuyBoxBtnClick on='clicked')

                (bind enabled "isBuyBoxBtnVisible && isViewAccessible && isButtonsEnabled")
            )
            (button
                (name = 'backBtn')
                (macro ButtonStylePrimary "BUTTON_SIZE_LARGE")
                (style
                    (minWidth = 160px)
                )
                (label = "R.strings.lootboxes.buttonLabel.back()")
                (bind visible "isBackBtnVisible")
                (dispatch evOnCloseBtnClick on='clicked')

                (bind enabled "isBackBtnVisible && isViewAccessible && isButtonsEnabled")
            )

            (element Group 'boxesCountButtons' 'group' renderer_name='LBCountSlotBtn' container_flow="Flow.HORIZONTAL"
                (name = 'countButtons')
                (scope
                    (containerGap = 18px)
                )
                (style
                    (marginLeft = 13px)
                )

                (bind visible "isOpenBoxBtnVisible")

                # WOTD-174106
                (bindcall setFocus
                    (event "onCountSelected")
                )
            )
        )

        (hblock
            (name = 'guaranteedFrequencyBlock')
            (style
                (position = absolute)
                (bottom = 27px)
                (width = 100%)
                (align = "center")
            )
            (tf
                (name = 'guaranteedFrequencyTextSoon')
                (bind htmlText "htmlTextStyle(formatString(
                        R.strings.lootboxes.entryView.guaranteedFrequency.newYear_premium.soon(),
                        [{
                            name: 'countText',
                            value: htmlTextStyle(
                                TextFormat(R.strings.lootboxes.entryView.guaranteedFrequency.countText(), {count: guaranteedFrequency - attemptsToGuaranteed}),
                                'NeutralTextStyle'
                                )
                        }],
                        true),
                        'MainTextStyle'
                    )"
                )
                (bind visible "guaranteedFrequency - attemptsToGuaranteed > 1")
            )
            (tf
                (name = 'guaranteedFrequencyTextNext')
                (bind htmlText "htmlTextStyle(
                        R.strings.lootboxes.entryView.guaranteedFrequency.newYear_premium.next(),
                        'MainTextStyle'
                    )"
                )
                (bind visible "guaranteedFrequency - attemptsToGuaranteed <= 1")
            )
            (text_button 'BtnIcon'
                (macro TextButtonStyle)
                (iconAlign = "right")
                (icon
                    (style
                        (marginLeft = -5px)
                    )
                )
                (label
                    (class NeutralTextStyle)
                    (style
                        (marginLeft = -3px)
                        (filters)
                    )
                )
                (label = "R.strings.lootboxes.entryView.guaranteedFrequency.moreInfo()")
                (icon = "R.images.gui.maps.icons.library.browser_link()")
                (dispatch onGuaranteedRewardsInfo on='clicked')
            )
            (bind visible "selectedBoxName != BOX_NAME_USUAL && guaranteedFrequency > 0")
        )

        (hblock
            (name = 'boxesUnavailableBlock')
            (style
                (position = absolute)
                (bottom = 70px)
                (hcenter = 0px)
                (gap = 9px)
                (align = "center|middle")
            )
            (bind visible "isBoxesUnavailable")
            (image
                (name = 'alertIcon')
                (style
                    (marginTop = 2px)
                )
                (source = "R.images.gui.maps.icons.library.alertIcon()")
            )
            (tf
                (name = 'alertTF')
                (class AlertBigTextStyle)
                (text = "R.strings.lootboxes.entryDesc.notAvailableNow()")
            )
        )

        (element BuyLootboxGiftButton 'buyLootboxButtonBig'
            (style
                (position = absolute)
                (bottom = 31px)
                (right = 16px)
            )
            (bind visible "isGiftBuyBtnVisible")
            (exec "playSound(R.sounds.play())" on='click')
            (dispatch onBuyBoxBtnClick on='click'
                (enabled = "$event.buttonIdx == MOUSE.LEFT")
            )
        )
    )

    (block
        (name = 'showVideoCheckboxBlock')
        (style
            (position = absolute)
            (bottom = 29px)
            (left = 17px)
            (bind alpha "interfaceAlpha")
        )
        (check_box
            (name = 'showVideoCheckbox')
            (macro CheckBoxStyleMain "CHECK_BOX_SIZE_LARGE")
            (label = "R.strings.lootboxes.buttonLabel.videoSwitch.lowerCase()")
            (bind selected "!isVideoOff")
            (dispatch onVideoChangeClick on='clicked')
        )
    )

    (block
        (name = 'tabMenu')
        (style
            (position = absolute)
            (vcenter = 0px)
            (left = 40px)
            (bind alpha "interfaceAlpha")
        )
        (bind mouseChildren "isButtonsEnabled")
        (block
            (name = 'bgHolder')
            (class AbsPositionFullSizeStyle)
            (style
                (bind gap "isSmall ? TAB_MENU_GAP_SMALL : TAB_MENU_GAP")
            )
            (controller $Repeat renderer='NYTabBarBgImage' count=2
                (exprs
                    (name = "'barSectionBg_' + $index")
                    (scope
                        (bind isSmall "isSmall")
                        (bind tabCount "$index == 0 ? TAB_MENU_GAP_START_INDEX + 1 : boxTabs.length - (TAB_MENU_GAP_START_INDEX + 1)")
                    )
                )
            )
        )
        (element NYTabBar 'NyTabBarBoxRenderer' 'NyTabBarSelectedBlockRenderer' "MENU_LEFT_SIZE"
            (name = 'tabBar')
            (scope
                (bind selectedIndex "currentIndex")
                (bind renderers "boxTabs")
                (bind isSmall "isSmall")
                (horizontal = false)
                (isHideText = true)
                (gapStartedFromIndex = "TAB_MENU_GAP_START_INDEX")
                (bind gapSize "isSmall ? TAB_MENU_GAP_SMALL : TAB_MENU_GAP")
                (dispatch evOnBoxSelected args="$event" on='evTabBarIndexChanged')
            )
        )
    )

    (text_button 'closeBtn'
        (macro ButtonCloseStyle)
        (style
            (position = absolute)
            (right = 20px)
            (top = 28px)
            (bind alpha "interfaceAlpha")
        )
        (label = "R.strings.menu.viewHeader.closeBtn.label()")
        (dispatch evOnCloseBtnClick on='clicked')
    )

    (element RewardVideo
        (name = 'lootboxDeliveryVideo')
        (scope
            (canEscape = true)
            (sourceName = "R.videos.lootboxes.lootbox_delivery()")
            (bind playVideo true
                (bind enabled "isVideoPlaying")
            )
            (canClick = false)
            (bind isVideoPaused "!isClientFocused")
            (dispatch onVideoStarted on='evOnPlaybackStarted')
            (dispatch onVideoStopped on='evOnPlaybackStopped')
            (dispatch onVideoInterrupted on='evNeedStop')
        )
    )

    (bind mouseChildren "isViewAccessible")
)

(def layout LBCountSlotBtn()
    (name = 'LBSlotBtn')
    (macro LootBoxCountButtonModel)
    (bind name "'LBSlotBtn_'+idx")
    (scope
        (event onCountSelected)
    )

    (button 'slotButton'
        (macro ButVehicleToggleSlotStlyes)

        (style
            (minWidth = 60px)
            (height = 32px)
        )
        (tabIndex = 1)

        (label (class LBCountButtonStyle) )
        (bind label "label")

        (bind selected "isSelected")
        (bind enabled "isEnabled")
        (bind visible "isVisible")

        (bind buttonMode "!isSelected")
        (bind mouseEnabled "isEnabled && !isSelected")

        (dispatch onCountSelected args="{value:idx}" on='selectedChanged' dir=1)
    )

    (controller $ToolTip
        (delay = "0.4")
        (bindcall args header='' body="R.strings.lootboxes.tooltip.countButton.notEnabled()" init=true)
        (content = "R.views.common.tooltip_window.simple_tooltip_content.SimpleTooltipContent.resId")
        (decorator = "R.views.common.tooltip_window.tooltip_window.TooltipWindow.resId")
        (bind enabled "!isEnabled")
    )
)

(def css LBCountButtonStyle()
    (fontFamily = $TitleFont)
    (textColor = 0xfefeec)
    (fontSize = 14)
)

(def layout NyTabBarBoxRenderer()
    (macro ComponentStateBase "NY_SIDE_TAB_BTN_CONTENT")
    (scope
        (var tabModel:dict = null)
        (var isEnabled:bool = true)
        (var horizontal:bool = true)
        (var isSmall:bool = false)
        (var isHideText:bool = false)
        (var textElideStatus:bool = false)
        (event evTabBarSelectionPositionChange)
        (dispatch evPreSwitchContent dir=1 args="{view:tabModel.name}" on='evBtnLeftClickEvent'
            (enabled = "!selected")
        )

        (var hoverAlpha:number = 0)
        (controller $Animation
            (bindcall stop
                (event "evBtnOverEvent")
                (event "evBtnOutEvent")
            )
            (bindcall play
                duration=0.3
                from={hoverAlpha:0}
                to={hoverAlpha:1}
                easing="Easing.cubic_out"
                (event "evBtnOverEvent")
            )
            (bindcall play
                duration=0.3
                from={hoverAlpha:1}
                to={hoverAlpha:0}
                easing="Easing.cubic_out"
                (event "evBtnOutEvent")
            )
        )
    )
    (bind buttonMode "!selected")
    (style
        (bind width "isSmall ? MENU_LEFT_SIZE['widthSmall'] : MENU_LEFT_SIZE['widthBig']")
        (bind height "isSmall ? MENU_LEFT_SIZE['heightSmall'] : MENU_LEFT_SIZE['heightBig']")
        (align = "center|middle")
    )
    (image
        (name = 'icon')
        (style
            (position = absolute)
            (hcenter = 0)
            (vcenter = -18px)
        )
        (bind source "isSmall && R.images.gui.maps.icons.new_year.leftTabBar[tabModel.iconName + '_s'].exists()
            ? R.images.gui.maps.icons.new_year.leftTabBar[tabModel.iconName + '_s']()
            : R.images.gui.maps.icons.new_year.leftTabBar[tabModel.iconName]()"
            init=false
        )
    )
    (element NYMenuInfoCount
        (name = 'infoCount')
        (style
            (position = absolute)
            (hcenter = 0)
            (bind vcenter "isSmall ? 8px : 12px")
        )
        (scope
            (bind count "tabModel != null && tabModel.infoCount ? tabModel.infoCount : 0" init=false)
            (bind isSmall "isSmall")
            (maxCount = 999)
        )
        (bind visible "tabModel != null")
    )
    (image
        (name = 'hover')
        (class AbsPositionFullSizeStyle)
        (style
            (alpha = 0)
            (top = -10px)
            (bind alpha "hoverAlpha")
        )
        (source  = "R.images.gui.maps.icons.new_year.leftTabBar.leftMenuOver()")
    )
    (element NySmallBubble
        (style
            (position = absolute)
            (bind top "isSmall ? 12px : 16px")
            (bind left "isSmall ? 38px : 64px")
        )
        (scope
            (bind value "tabModel.unseenCount" init=false)
        )
    )
    (controller $ToolTip
        (delay = 0.4)
        (args category="tabModel.name")
        (content = "R.views.lobby.tooltips.loot_box_category_tooltip.LootBoxCategoryTooltipContent.resId")
        (decorator = "R.views.common.tooltip_window.tooltip_window.TooltipWindow.resId")
    )
)
