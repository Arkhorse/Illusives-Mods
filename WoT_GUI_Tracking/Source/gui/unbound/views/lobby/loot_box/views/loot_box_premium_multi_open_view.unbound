(def layout LootBoxPremiumMultiOpenView() entrance=true hideBeforeResolve=true
    (macro LootBoxPremiumMultiOpenViewModel)
    (name = 'LootBoxPremiumMultiOpenView')
    (scope
        (const BTN_WIDTH:number = 180)
        (const CONTENT_MIN_HCENTER:number = -768)
        (const CONTENT_MAX_HCENTER:number = -479)
        (const DIFF_HD_SD:number = 896)

        (const BG_WIDTH:number = 2560)
        (const BG_HEIGHT:number = 1600)
        (const BG_SMALL_SCALE:number = 0.7)
        (const BG_MEDIUM_SCALE:number = 0.8)
        (const BG_LARGE_SCALE:number = 1)
        (const BG_OFFSET_RATIO:number = 0.47)

        (var bgScale:number = "viewSize.width > BASE_WIDTH_1366 ? (viewSize.width > BASE_WIDTH_1680 ? BG_LARGE_SCALE : BG_MEDIUM_SCALE) : BG_SMALL_SCALE"
            (event "viewResized")
        )

        (var bgLeftOffset:number = "(viewSize.width * 0.5) - (BG_WIDTH * bgScale * BG_OFFSET_RATIO)"
            (event "viewResized")
        )
        (var bgTopOffset:number = "(viewSize.height * 0.5) - (BG_HEIGHT * bgScale * BG_OFFSET_RATIO)"
            (event "viewResized")
        )

        (var isSmallHeight:bool = "viewSize.height < BASE_HEIGHT_900" init=true
            (event "viewResized")
        )
        (event evOnCloseBtnClick)
        
        # start ribbon anim
        (event onFadeInStart)
        (event onFadeInComplete)
        (var isFadeIn:bool = false)
        (bind isFadeIn "true"
            init=false 
            (event "onFadeInComplete")
        )
        (dispatch onViewShowed
            init=false
            (event "onFadeInComplete")
        )
        # start awards animation
        (event onHeaderAnimated)
        (var isHeaderAnimated:bool = false)
        (bind isHeaderAnimated "true"
            init=false 
            (event "onHeaderAnimated")
        )

        # rewards block fadein
        (event evOnRewardBlockFadeIn)

        # start footer animation
        (event evOnRewardsAnimationEnd)
        #end of slot animation
        (event evOnRewardSlotAnimationEnd)
        (var currentRewardIndex:number = 0)
        (bind currentRewardIndex "$event.index"
            init=false
            (event "evOnRewardSlotAnimationEnd")
        )

        (dispatch onOpenBox args="{currentIndex: currentRewardIndex}"
            init=false
            (event "evOnRewardSlotAnimationEnd")
        )

        (event evCanShowButtons)
        (var isRewardsAnimated:bool = false)
        (bind isRewardsAnimated "leftToOpenCount == 0"
            watch=false
            init=false 
            (event "evOnRewardsAnimationEnd")
        )
        (bind isRewardsAnimated "false"
            (event "openNextBoxes")
        )

        # on bg loaded
        (event evOnBgLoaded)
        (event evReadyToShow)

        # start congrats video showing
        (event evNeedStartCongratsVideo)
        (dispatch showSpecialReward on='evNeedStartCongratsVideo')
        (bind isPausedForSpecial "true"
            init=false
            on='evNeedStartCongratsVideo'
        )

        (event evFadeBeforeOpen)
        (event evFadeBeforeOpenComplete)

        (var defaultRewardSize:str = "rewardSize != null && rewardSize != '' ? rewardSize : 'big'")

        (var titleAlpha:number = 0)
        (var subTitleAlpha:number = 0)

        (controller $Animation
            (bindcall playSeq "[
                    {duration:0.15, to:{titleAlpha:1}, easing:Easing.cubic_in},
                    {duration:0.15, to:{subTitleAlpha:1}, easing:Easing.cubic_in}
                ]"
                callbacks = "{onComplete: onHeaderAnimated}"
                (bind enabled "isFadeIn")
            )
        )

        (var viewAlpha:number = 0)
        (var tmpVar:number = 0)
        (controller $Animation name='viewAlphaAnimation'
            (bindcall play
                duration=0.5
                to={viewAlpha:1}
                callbacks="{onComplete: onFadeInComplete}"
                (event "evOnBgLoaded")
            )
            (bindcall play
                duration=0.5
                to={viewAlpha:0}
                callbacks="{onComplete: onCloseBtnClick}"
                (enabled = "!isMemoryRiskySystem && currentRewardIndex > 0 && (isOnPause || isRewardsAnimated || isServerError)")
                (event "evOnCloseBtnClick")
            )
            (bindcall play
                duration=0.01
                from={tmpVar:0}
                to={tmpVar:1}
                callbacks="{onComplete: onCloseBtnClick}"
                (enabled = "isMemoryRiskySystem && currentRewardIndex > 0 && (isOnPause || isRewardsAnimated || isServerError)")
                (event "evOnCloseBtnClick")
            )

            (bindcall play
                duration=0.3
                to={viewAlpha:0}
                callbacks="{onComplete: evFadeBeforeOpenComplete}"
                init=false
                (event "evFadeBeforeOpen")
            )

            (bindcall play
                duration=0.3
                to={viewAlpha:0}
                callbacks="{onComplete: onCloseBtnClick}"
                init=false
                (bind enabled "hardReset")
            )
        )

        (var rewardBlockAlpha:number = 0)
        (controller $Animation
            (bindcall play
                duration=0.2
                from={rewardBlockAlpha:0}
                to={rewardBlockAlpha:1}
                callbacks="{onComplete:evOnRewardBlockFadeIn}"
                init=false
                (bind enabled "isHeaderAnimated")
            )
        )
    )
        
    (bind mouseChildren "false"
        init=false 
        (event "evFadeBeforeOpen")
    )

    # sounds
    (exec "playSound(R.sounds.gui_lootbox_reward_5_lootboxes())"
        (event "evOnRewardBlockFadeIn")
    )

    (style
        (macro ViewResizeBindedSize)
        (bind alpha "viewAlpha")
        (backgroundColor = 0xFF010309)
    )

    # Close button and event for ESC
    (dispatch evOnCloseBtnClick
        on='escPressed'
        (enabled = "currentRewardIndex > 0 && (isOnPause || isServerError || isRewardsAnimated)")
    )
    (dispatch onPauseOpening
        on='escPressed'
        (enabled = "currentRewardIndex > 0 && !isOnPause")
    )

    (macro ViewTransparentBg)

    (block
        (name = 'multiOpenBgBlock')
        (style
            (position = "absolute")
            (bind top "bgTopOffset")
            (bind left "bgLeftOffset")
        )
        (swf
            (name = 'multiOpenBgAnimation')
            (style
                (bind scaleX "bgScale")
                (bind scaleY "bgScale")
                (blendMode = 'lighten')
            )
            (dispatch evOnBgLoaded on='complete')
            (source = "R.animations.ny.loot_multi_open()")

            (bindcall gotoAndStop 'NewYear'
                (bind enabled "boxCategory == 'NewYear'")
            )
            (bindcall gotoAndStop 'Christmas'
                (bind enabled "boxCategory == 'Christmas'")
            )
            (bindcall gotoAndStop 'Oriental'
                (bind enabled "boxCategory == 'Oriental'")
            )
            (bindcall gotoAndStop 'Fairytale'
                (bind enabled "boxCategory == 'Fairytale'")
            )
            (macro EmptyHitAreaMacro)
        )
    )

    (block
        (name = 'headerBlock')
        (style
            (position = "absolute")
            (width = 100%)
            (bind top "isSmallHeight ? 36 : 69")
            (align = "center")
        )

        (tf
            (name = 'titleTf')
            (class LBTitleTextStyle)
            (style
                (bind alpha "titleAlpha")
            )
            (text = "R.strings.lootboxes.premiumMultiOpenView.title()")
            (antiAliasType = 'normal')
        )

        (tf
            (name = 'subTitleTf')
            (style
                (bind alpha "subTitleAlpha")
                (bind marginTop "isSmallHeight ? 0 : 2")
            )
            (bind htmlText "htmlTextStyle(
                                TextFormat(
                                    R.strings.lootboxes.premiumMultiOpenView.subTitle.opened(), 
                                    {
                                        category:
                                            htmlTextStyle(
                                                R.strings.lootboxes.premiumMultiOpenView.subTitle.category[boxCategory](), 
                                                isSmallHeight ? 'LBSubTitleHighlightTextStyle' : 'LBSubTitleHighlightBigTextStyle'
                                            ),
                                        count: leftToOpenCount == 0 ? needToOpen : (needToOpen - leftToOpenCount)
                                    }
                                ), 
                                isSmallHeight ? 'LBSubTitleTextStyle' : 'LBSubTitleBigTextStyle'
                                )"
                init=false
            )
        )
    )

    (block
        (name = 'contentBlock')
        (style
            (position = "absolute")
            (bind hcenter "max((CONTENT_MAX_HCENTER - (CONTENT_MAX_HCENTER - CONTENT_MIN_HCENTER) * (viewSize.width - BASE_WIDTH_1024)/DIFF_HD_SD), CONTENT_MIN_HCENTER)"
                init=true
                (event "viewResized")
            )
            (vcenter = -8px)
            (height = 485px)
        )

        (block
            (name = 'rewardBlock')
            (style
                (paddingTop = 15px)
                (bind alpha "rewardBlockAlpha")
            )

            (element NYRenderersLootAnimation
                (scope
                    (bind renderer_array "rewards")
                    (bind size "defaultRewardSize")
                    (bind needToOpen "needToOpen")
                    (bind leftToOpenCount "leftToOpenCount")
                    (bind currentPage "currentPage")
                    (maxPageItems = "WINDOW_MAX_BOX_COUNT")
                    (bind isPausedForSpecial "isPausedForSpecial")
                    (bind repeaterEnabled "true"
                        init=false
                        (event "evOnRewardBlockFadeIn")
                    )
                    (bind isSmall "isSmallHeight")

                    (dispatch evOnRewardsAnimationEnd
                        init=false
                        on='evRendererEndAnimation'
                    )
                    (dispatch evOnRewardSlotAnimationEnd
                        init=false
                        on='evSlotAnimationComplete'
                    )
                )
            )
        )
    )

    (block
        (name = 'footerBlock')
        (style
            (position = "absolute")
            (bind bottom "isSmallHeight ? 20 : 30")
            (hcenter = 0px)
            (align = "center")
            (gap = 10px)
            (bind alpha "subTitleAlpha")
        )

        (hblock
            (name = 'serverErrorBlock')
            (style
                (position = "absolute")
                (hcenter = 0px)
                (top = -40px)
                (align = "middle|center")
            )
            (image
                (source = "R.images.gui.maps.icons.library.alertIcon1()")
            )
            (tf
                (class AlertTextStyle)
                (name = 'serverErrorTF')
                (text = "R.strings.system_messages.lootboxes.open.server_error()")
            )
            (bind visible "isServerError")
        )

        (hblock
            (name = 'buttonsBlock')
            (style
                (gap = 20px)
            )
            (button 
                (name = 'applyBtn')
                (macro ButtonStyleMain "BUTTON_SIZE_LARGE")
                (bind label "TextFormat(R.strings.lootboxes.premiumMultiOpenView.unpauseLabel(), {count:leftToOpenCount})")
                (icon = "R.images.gui.maps.icons.lootboxes.play()")
                (dispatch onContinueOpening on='clicked')
                (bind enabled "isLootboxesEnabled")
                (style
                    (minWidth = "BTN_WIDTH")
                )

                (controller $ToolTip
                    (delay = "0.4")
                    (args body="R.strings.lootboxes.tooltip.restrictedMode.resId")
                    (content = "R.views.common.tooltip_window.simple_tooltip_content.SimpleTooltipContent.resId")
                    (decorator = "R.views.common.tooltip_window.tooltip_window.TooltipWindow.resId")
                    (bind enabled "!isLootboxesEnabled")
                )
                (bind tabEnabled "isLootboxesEnabled && isRewardsAnimated")
                (bind visible "!isServerError && isOnPause && leftToOpenCount > 0")
            )

            (button 
                (name = 'confirmButton')
                (macro ButtonStylePrimary "BUTTON_SIZE_LARGE") 
                (style
                    (minWidth = "BTN_WIDTH")
                )
                (bind label "TextFormat(R.strings.lootboxes.premiumMultiOpenView.pauseLabel(), {count:leftToOpenCount})")
                (icon = "R.images.gui.maps.icons.lootboxes.pause()")
                (bind visible "!isServerError && !isOnPause && leftToOpenCount > 0")

                (dispatch onPauseOpening on='clicked')
            )

            (button 
                (name = 'openNextButton')
                (macro ButtonStyleMain "BUTTON_SIZE_LARGE") 
                (style
                    (minWidth = "BTN_WIDTH")
                )
                (bind label "TextFormat(
                    R.strings.lootboxes.premiumMultiOpenView.openNextBoxesLabel(), 
                    {count:boxesCounter > limitToOpen ? limitToOpen : boxesCounter})"
                )
                (bind visible "!isServerError && isRewardsAnimated && boxesCounter > 0")
                (bind enabled "isLootboxesEnabled && isRewardsAnimated")

                (dispatch openNextBoxes on='clicked')
            )

            (button 
                (name = 'commonButton')
                (macro ButtonStylePrimary "BUTTON_SIZE_LARGE") 
                (style
                    (minWidth = "BTN_WIDTH")
                )
                (bind label "isServerError || boxesCounter == 0
                                ? R.strings.lootboxes.premiumMultiOpenView.applyLabel() 
                                : R.strings.lootboxes.premiumMultiOpenView.backToBoxesLabel()"
                )
                (bind visible "isServerError || isRewardsAnimated")

                (bindcall setFocus
                    (bind enabled "isServerError || boxesCounter == 0")
                )

                (dispatch evOnCloseBtnClick on='clicked')
            )
        )

        (tf
            (name = 'boxCounterTF')
            (style
                (width = 100%)
                (marginTop = 5px)
            )
            (bind htmlText "boxesCounter > 0 
                            ? htmlTextStyle(
                                formatString(
                                    R.strings.lootboxes.premiumMultiOpenView.boxesInStorage(), 
                                    [{value: htmlTextStyle(boxesCounter, 'NeutralTextStyle'), name:'count'}], 
                                    true
                                ), 
                                'MainTextStyle', 
                                'center'
                            ) 
                            : htmlTextStyle(
                                R.strings.lootboxes.premiumMultiOpenView.boxesNotAvailable(), 
                                'MainTextStyle', 
                                'center'
                            )"
                init=false
            )
        )
    )

    (text_button 'closeBtn'
        (macro ButtonCloseStyle)
        (style
            (position = "absolute")
            (right = 20px)
            (top = 28px)
        )
        (label = "R.strings.menu.viewHeader.closeBtn.label()")
        (dispatch evOnCloseBtnClick
            on='clicked'
            (enabled = "isOnPause || isServerError || isRewardsAnimated")
        )
        (dispatch onPauseOpening
            on='clicked'
            (enabled = "!isOnPause")
        )

        (bind enabled "currentRewardIndex > 0")
        (bind visible "currentRewardIndex > 0")
    )
)

(def layout LootMultiOpenRenderer(rendererModel:dict, size:str='small')
    # Represent slot renderer with position number and rewards list
    (scope
        (event evOnAnimComplete)
        (event evOnFadeIn)
        (const SEPARATOR_WIDTH:number = 640)
        (const SEPARATOR_WIDTH_SMALL:number = 570)
        (var isShowStart:bool = false)
        (var altRendererModel:dict = null)
        (var useAltModel:bool = false)
        (var isFirstLine:bool = false)
        (var isSmall:bool = false)

        (event evOnPageChanged)
        (var currentPage:number = 0
            (dispatch evOnPageChanged on='evChanged')
        )

        (var elementAlpha:number = 0)
        (controller $Animation
            (bindcall play
                duration=0.2
                from="{elementAlpha:0}"
                to="{elementAlpha:1}"
                callbacks="{onComplete: evOnFadeIn}"
                (bind enabled "isShowStart")
            )
        )
        (var posMarginRight:number = 50)
        (var posPaddingLeft:number = -20)
        (var posAlpha:number = 0)
        (controller $Animation
            (bindcall play
                duration="LB_PRREMIUM_SHOW_ANIMATION_TIME"
                from="{posMarginRight:40, posPaddingLeft: -20, posAlpha: 0}"
                to="{posMarginRight:20, posPaddingLeft: 0, posAlpha: 1}"
                easing="Easing.cubic_out"
                (event "evOnFadeIn")
            )
        )
    )
    (style
        (width = 100%)
        (bind height "NY_LOOTBOX_REWARD_SLOT_HEIGHT[size]")
        (bind alpha "elementAlpha")
    )
    
    (element LootMultiOpenRendererSeparator
        (name = 'separatorTop')
        (style
            (position = "absolute")
            (bind width "isSmall ? SEPARATOR_WIDTH_SMALL : SEPARATOR_WIDTH")
            (height = 1px)
            (bind alpha "!isFirstLine ? 0 : 0.5"
                (event "evOnAnimComplete")
            )
        )
    )

    (hblock
        (name = 'contentBlock')
        (style
            (paddingLeft = 30px)
            (bind height "NY_LOOTBOX_REWARD_SLOT_HEIGHT[size]")
        )

        (block
            (name = 'positionBlock')
            (style
                (bind height "NY_LOOTBOX_REWARD_SLOT_HEIGHT[size]")
                (align = "center | middle")
                (bind marginRight "posMarginRight")
                (bind paddingLeft "posPaddingLeft")
                (bind alpha "posAlpha")
            )
            (tf
                (name = 'positionTF')
                (style
                    (marginBottom = 2px)
                )
                (bind class "isSmall ? 'LBIndxBigTextStyle' : 'LBIndxTextStyle'")
                (bind text "TextFormat(
                        isSmall ? '{indx}' : R.strings.lootboxes.premiumMultiOpenView.boxIndx(), 
                        {indx:useAltModel && altRendererModel != null ? altRendererModel.indx : rendererModel.indx}
                    )"
                )
            )
        )

        (controller $Instance renderer='PremiumLBLootAnimation'
            (bindcall args renderer_name='LootRenderer' fade_in = 0.001 skipAnimation = true
                init=true
            )
            (exprs
                (style
                    (bind marginTop "size == 'small' ? -35 : -25")
                )
                (scope
                    (bind renderer_array "useAltModel && altRendererModel != null ? altRendererModel.rewards : rendererModel.rewards"
                        (bind enabled "isShowStart")
                    )
                    (dispatch evOnAnimComplete
                        init=false
                        on='evOnEndAnimation'
                    )
                )
            )
            (enabled = false)
            # start loot animation after fade in
            (bind enabled "true"
                init=false
                (event "evOnFadeIn")
            )
        )
    )

    (element LootMultiOpenRendererSeparator
        (name = 'separatorBottom')
        (style
            (bind width "isSmall ? SEPARATOR_WIDTH_SMALL : SEPARATOR_WIDTH")
            (height = 1px)
            (bottom = 3px)
            (alpha = 0.5)
        )
    )
)

(def layout NYRenderersLootAnimation()
    (name = 'nyRenderersLootAnimation')
    (scope
        (event evOnSlotAnimationComplete)
        (event evOnDrawElements)
        (event evRendererEndAnimation)
        (event evFakeSlotAnimationComplete)
        #use to pass current index to render's parent
        (event evSlotAnimationComplete)

        (var repeaterEnabled:bool = false)
        (var mainIndex:number = 0) 
        (bind mainIndex "mainIndex + 1"
            watch=false
            init=false
            (event "evFakeSlotAnimationComplete")
        )
        (var currentPage:number = 0)
        (dispatch evSlotAnimationComplete args="{index:mainIndex}" 
            (event "evFakeSlotAnimationComplete")
        )
        (var renderer_array:array = [])
        (var needToOpen:number = 0)
        (var leftToOpenCount:number = -1)
        (var maxPageItems:number = 0)
        (var fakeNumber:number = 0)
        (var size:str = 'small')
        # delay between isPausedForSpecial and mainIndex
        (controller $Animation
            (bindcall play
                duration="LB_PRREMIUM_SHOW_ANIMATION_TIME"
                to={fakeNumber:1}
                callbacks="{onComplete:evFakeSlotAnimationComplete}"
                (event "evOnSlotAnimationComplete")
            )
        )
        (var isPausedForSpecial:bool = false)
        (var isSmall:bool = false)
    ) 

    (style
        (bind flow "Flow.VERTICAL")
        (bind height "NY_LOOTBOX_REWARD_SLOT_HEIGHT[size] * renderer_array.length")
    )

    (controller $Repeat renderer='LootMultiOpenRenderer'
        (bind count "renderer_array.length")
        (bindcall args rendererModel="renderer_array[$index]" size="size" init=true)
        (exprs
            (mouseEnabled = false)
            (bind mouseEnabled true
                (bind enabled "$index == mainIndex && !isPausedForSpecial")
            )
            (scope
                (bind altRendererModel "renderer_array[$index]")
                (bind useAltModel "currentPage > 1")
                (bind isShowStart "($index + maxPageItems*(currentPage - 1)) == mainIndex && !isPausedForSpecial")
                (bind currentPage "currentPage")
                (bind isFirstLine "$index == 0")
                (bind isSmall "isSmall")
                (dispatch evOnSlotAnimationComplete on='evOnAnimComplete')
            )
        )
        (bind enabled "repeaterEnabled")
    )
    (dispatch evRendererEndAnimation
        dir=2
        init=false
        (enabled = "mainIndex != 0 && mainIndex >= needToOpen * currentPage && leftToOpenCount == 0")
        (event "evFakeSlotAnimationComplete")
    )
)

(def layout LootMultiOpenRendererSeparator()
    (style
        (backgroundColor = 0x66cccccc)
    )
)

(def layout PremiumLBLootAnimation(renderer_name:str, fade_in:number = 0)
    (name = 'PremiumLBLootAnimation')
    (scope
        (event evOnStopSlotAnimation)
        (event evOnDrawElements)
        (event evOnEndAnimation)
        (event evArrayChanged)
        (var skipAnimation:bool = true)
        (var mainIndex:number = 0)
        (var leftElements:number = 0)
        (var nothingLeft:bool = false)
        (var renderer_array:array = []
            (dispatch evArrayChanged on='evChanged')
        )
        (bind mainIndex "mainIndex + 1"
            init=false
            watch=false
            (event "evOnStopSlotAnimation")
        )
        (bind mainIndex 0 
            (event "evArrayChanged")
        )
        (bind leftElements "renderer_array.length - mainIndex" 
            (event "evArrayChanged")
        )
        (bind nothingLeft "false"
            init=false
            (event "evArrayChanged")
        )
        (bind nothingLeft "leftElements == 0"
            init=false
            (event "evOnDrawElements")
        )

        (var elementAlpha:number = 0)
        (controller $Animation
            (bindcall play
                duration="fade_in"
                to={elementAlpha:1}
                callbacks="{onComplete:evOnDrawElements}"
                (event "evArrayChanged")
            )
        )
    )
    (mouseEnabled = false)

    (style
        (flow = "Flow.HORIZONTAL")
        (bind alpha "elementAlpha")
    )

    (dispatch evOnEndAnimation dir=2  init=false
        (bind enabled "nothingLeft")
    )
    
    (controller $Repeat layout=true
        (bind count "renderer_array.length")
        (exprs
            (element PremLBItemWrapper
                (name = "'rewardRenderer' + $index")
                (scope
                    (controller $Animation
                        (play
                            duration="LB_PRREMIUM_SHOW_ANIMATION_TIME"
                            to="{itemAlpha:1, posLeft:20 + $index * 100}"
                            easing="Easing.cubic_out"
                        )
                        (playSeq "[
                                {duration:0.1, to:{rOffset:150, bOffset:100, gOffset:150}},
                                {duration:1, to:{rOffset:0, bOffset:0, gOffset:0}}
                            ]"
                            easing="Easing.cubic_out"
                        )
                    )
                )

                (controller $Instance
                    (bind renderer "renderer_array[$index]['rendererType'] ? renderer_array[$index].rendererType : renderer_name")
                    (args "renderer_array[$index]")
                    (exprs
                        (mouseEnabled = false)
                        (bind mouseEnabled true
                            (bind enabled "$index == mainIndex || skipAnimation")
                        )
                        (scope
                            (bind isShowStarted "$index == mainIndex || skipAnimation")
                            (dispatch evOnStopSlotAnimation on='evShowComplete')
                        )
                    )
                )
            )
        )
        (enabled = false)
        (bind enabled false
            init=false
            (event "evArrayChanged")
        )
        (bind enabled true
            init=false
            (event "evOnDrawElements")
        )
    )
)

(def layout PremLBItemWrapper()
    (scope
        (var itemAlpha:number = 0)
        (var posLeft:number = 0)
        (var rOffset:number = 0)
        (var bOffset:number = 0)
        (var gOffset:number = 0)
    )
    (style
        (position = "absolute")
        (bind alpha "itemAlpha")
        (bind left "posLeft")
    )
    (bind colorTransform "{
        redMultiplier:1, greenMultiplier:1, blueMultiplier:1, alphaMultiplier:1,
        redOffset:rOffset, greenOffset:gOffset, blueOffset:bOffset, alphaOffset:0}"
    )
)

(def constant LB_PRREMIUM_SHOW_ANIMATION_TIME "0.2")