(def element NewYearLevelUpView() layout=true entrance=true hideBeforeResolve=true
    (macro NewYearLevelUpViewModel)
    
    (macro LootCongratsTypes)
    (scope
        (event evStart)
        (event evStop)
        (event evShowBurstAnimation)
        (event evHideBurstAnimation)
        (event evShowCongratsText)
        (event evHideCongratsText)
        (event evShowRewards)
        (event evShowCollectRewardsBtn)
        (event evLevelChanged)
        (event evLeftShift)
        (event evShowSnowMaiden)
        (event evEnableCollectRewardsBtn)
        (event evHideShine)
        (event evHideShineComplete)
        (event evOnRewardsAnimationComplete)
        (event evAdditionalRewardsAnimationComplete)
        (event evShowSnowMaidenComplete)
        (event evShowTextHeaderComplete)
        (event evShowTextSubHeaderComplete)
        (event evShineSlotComplete)
        (event evHideBigShineComplete)
        (event evBeginFlow)
        (event evShowWind)
        (event evSound)
        (event evCircleAnimationLoaded)

        (event evPSAAnimationStop)
        (event evShowOpenPSABoxAnimation)
        (event evPSASubtitleShowed)
        (event evShowPSARewards)

        (event evTankSlotRollOverEvent)
        (event evTankSlotRollOutEvent)
        (event evSnowMaidenRollOverEvent)
        (event evSnowMaidenRollOutEvent)
        (var isLarge:bool = "viewSize.width >= BASE_WIDTH_1600 && viewSize.height >= BASE_HEIGHT_900" init=true
            (event "viewResized")
        )
        (var finalHeaderPosition:number = -430)
        (bind finalHeaderPosition "hasVehicleBranch ? (viewSize.height > BASE_HEIGHT_960 ? -430 : -350) : (viewSize.height > BASE_HEIGHT_960 ? -340 : -260)"
            (event "viewResized")
        )
        (var closeEnabled:bool = false)
        (bind closeEnabled true init=false
            (event "evHideBurstAnimation")
        )
        (bind closeEnabled false init=false
            (event "evStop")
        )
        (var secondTime:bool=false)
        (bind secondTime true init=false
            (event "evStop") 
        )

        # dispatch loading screen disappear and we can start animations
        (event evViewReady)
        (dispatch evViewReady
            (bind enabled "isViewReady")
        )

        # show bg initialy at first level
        (var bgBlockAlpha:number = 0)
        (bind bgBlockAlpha "1" init=false
            (event "evStop")
        )
        (bind bgBlockAlpha "1"
            (bind enabled "!isViewReady && level == 1")
        )
        (controller $Animation
            (bindcall play
                duration=0.90
                to={bgBlockAlpha:1}
                easing="Easing.cubic_out"
                (enabled = "level > 1")
                (event "evStart")
            )
            (bindcall stop
                (event "evStop")
            )
        )

        (var circleAnimationLoaded:bool = false)
        (bind circleAnimationLoaded true init=false
            (event "evCircleAnimationLoaded")
        )

        # start all animations
        (dispatch evBeginFlow
            (enabled = "!secondTime && circleAnimationLoaded && isViewReady")
            (event "evViewReady")
            (event "evCircleAnimationLoaded")
            (event "evLevelChanged")
        )
        (dispatch evStart
            (enabled = "secondTime && circleAnimationLoaded && isViewReady")
            (event "evViewReady")
            (event "evCircleAnimationLoaded")
            (event "evLevelChanged")
        )

        (var changeShinePosition:bool = false)
        (bind changeShinePosition true init=false
            (event "evOnRewardsAnimationComplete")
        )
        (bind changeShinePosition false init=false
            (event "evLevelChanged")
        )
        (var __tempLvl:number = "level"
            (dispatch evLevelChanged on='evChanged')
        )
        (var hasPSABonus:bool = "additionalRewards != null && additionalRewards.length > 0")
        (var psaRewardsShowingStart:bool = false)
        (bind psaRewardsShowingStart true init=false
            (event "evOnRewardsAnimationComplete")
            (enabled = hasPSABonus)
        )
        (bind psaRewardsShowingStart false init=false
            (event "evStop")
        )

        (dispatch evStop
            (event "onClose")
            (event "onToTanks")
            (event "onToTalismans")
        )

        (var finalVcenter:number = "hasVehicleBranch ? 100 : 70")
        (var noAdditionalBonusOffsetRibbon:number = 60)
        (bind noAdditionalBonusOffsetRibbon "viewSize.height > 900 && viewSize.width > BASE_WIDTH_1600 ? 155 : 60"
            (event "viewResized")
        )
        (var noAdditionalBonusOffsetTitle:number = 110)
        (bind noAdditionalBonusOffsetTitle "containsTalisman ? 90 : (viewSize.height > 900 && viewSize.width > BASE_WIDTH_1600 ? 100 : 110)"
            (event "viewResized")
            (enabled = "!psaRewardsShowingStart")
        )
        (bind noAdditionalBonusOffsetTitle 30 init=false
            (event "evShowOpenPSABoxAnimation")
            (enabled = "hasPSABonus")
        )

        (const FINAL_VCENTER_TANK:number = -120)
        (const FINAL_VCENTER_SHINE:number = 0)
        (const SUBTYPE_TALISMAN:str = 'freeTalisman')

        (const BEGIN_FLOW_TXT_TMR_ID:str = 'beginFlowTxtTmrId')
        (const SOUND_TXT_TMR_ID:str = 'soundTxtTmrId')
        (const SHOW_CONGRATS_TXT_TMR_ID:str = 'showCongratsTxtTmrId')
        (const HIDE_CONGRATS_TXT_TMR_ID:str = 'hideCongratsTxtTmrId')
        (const SHOW_REWARDS_TMR_ID:str = 'showRewardsTmrId')
        (const SHOW_COLLECT_RWRDS_BTN_TMR_ID:str = 'showCollectRwrdsBtnTmrId')
        (const SHOW_SNOW_MAIDEN_TMR_ID:str = 'showSnowMaidenTmrId')
        (const BEGIN_LEFT_SHIFT_TMR_ID:str = 'beginLeftShiftTmrId')
        (const SHOW_WIND_TMR_ID:str = 'showWindTmrId')

        (var tmpVal:number = 0)
        
        # To achieve ladder effect we need to set a little difference in delays
        (const LEFT_SHIFT_TIMING_TOP:number = 1.15)
        (const LEFT_SHIFT_TIMING_MIDDLE:number = 1.20)
        (const LEFT_SHIFT_TIMING_RIBBON:number = 1.25)
        (const LEFT_SHIFT_TIMING_BOTTOM:number = 1.30)
        
        (var startTime:number = "level == 1 ? 0.35 : NY_LVL_UP_START_ANIM")
        # Block with timings with primary animations
        (exec "playSound(R.sounds.hangar_newyear_level_up_overlay())"
            (event "evSound")
        )
        # Time for ensurance that everything was loaded even on weak computers
        (macro _TimerWrkarnd "startTime" "evStart" "evBeginFlow" "evStop" "BEGIN_FLOW_TXT_TMR_ID" condition="level>0")

        (macro _TimerWrkarnd "0.01" "evSound" "evStart" "evStop" "BEGIN_FLOW_TXT_TMR_ID")

        # Showing "New level of the atmosphere!"
        (macro _TimerWrkarnd "1.16" "evShowCongratsText" "evStart" "evStop" "SHOW_CONGRATS_TXT_TMR_ID")

        # Showing all the rewards!"
        (macro _TimerWrkarnd "3.15" "evShowRewards" "evStart" "evStop" "SHOW_REWARDS_TMR_ID")

        # Hiding "New level of the atmosphere!"
        (macro _TimerWrkarnd "3.64" "evHideCongratsText" "evStart" "evStop" "HIDE_CONGRATS_TXT_TMR_ID")

        # Showing buttons 
        (macro _TimerWrkarnd "0.1" "evShowCollectRewardsBtn" "evAdditionalRewardsAnimationComplete" "evStop" "SHOW_COLLECT_RWRDS_BTN_TMR_ID" condition="hasPSABonus")
        (macro _TimerWrkarnd "0.1" "evShowCollectRewardsBtn" "evOnRewardsAnimationComplete" "evStop" "SHOW_COLLECT_RWRDS_BTN_TMR_ID" condition="!hasPSABonus && !containsTalisman && !hasVehicleBranch")
        (macro _TimerWrkarnd "0.75" "evShowCollectRewardsBtn" "evOnRewardsAnimationComplete" "evStop" "SHOW_COLLECT_RWRDS_BTN_TMR_ID" condition="!hasPSABonus && !containsTalisman && hasVehicleBranch")
        (macro _TimerWrkarnd "0.2" "evShowCollectRewardsBtn" "evShowSnowMaidenComplete" "evStop" "SHOW_COLLECT_RWRDS_BTN_TMR_ID" condition="containsTalisman")

        # Shift content to the left (only if talisman presents)
        (macro _TimerWrkarnd "6.55" "evLeftShift" "evStart" "evStop" "BEGIN_LEFT_SHIFT_TMR_ID" condition="containsTalisman")

        # Showing wind (only if talisman presents)
        (macro _TimerWrkarnd "0.75" "evShowWind" "evLeftShift" "evStop" "SHOW_WIND_TMR_ID" condition="containsTalisman")

        # Showing snowMaiden (only if talisman presents)
        (macro _TimerWrkarnd "0.35"  "evShowSnowMaiden" "evShowWind" "evStop" "SHOW_SNOW_MAIDEN_TMR_ID" condition="containsTalisman")

        (var snowflakeAlpha:number = 0.0)
        (var snowflakeScale:number = 0.6)
        (var snowflakeRedAdd:number = 0)
        (var snowflakeGreenAdd:number = 0)
        (var snowflakeBlueAdd:number = 0)
        (var snowflakeVCenter:number = 0)
        (var snowflakeBlurVal:number = 20)

        (bind snowflakeAlpha 0.0
            (event "evStop")
        )
        (bind snowflakeScale 0.6
            (event "evStop")
        )
        (bind snowflakeRedAdd 0
            (event "evStop")
        )
        (bind snowflakeGreenAdd 0
            (event "evStop")
        )
        (bind snowflakeBlueAdd 0
            (event "evStop")
        )
        (bind snowflakeVCenter 0
            (event "evStop")
        )
        (bind snowflakeBlurVal 0
            (event "evStop")
        )

        (controller $Animation
            (bindcall playSeq "[
                    {
                        duration:0.22, 
                        to:{
                            snowflakeAlpha:1.0,
                            snowflakeScale:1.05,
                            snowflakeRedAdd:50,
                            snowflakeGreenAdd:50,
                            snowflakeBlueAdd:100
                        },
                        easing:Easing.cubic_in,
                        callbacks:{onComplete:evShowBurstAnimation}
                    },
                    {
                        duration:0.08,
                        to:{
                            snowflakeScale:1.0,
                            snowflakeRedAdd:0,
                            snowflakeGreenAdd:0,
                            snowflakeBlueAdd:0
                        },
                        easing:Easing.quint_out
                    },
                    {
                        delay: 3.6,
                        duration:0.3,
                        to:{snowflakeVCenter: finalVcenter*0.5, snowflakeBlurVal: 7, snowflakeAlpha:0.9},
                        easing:Easing.cubic_in,
                        callbacks:{onStart:evHideShine}
                    },
                    {
                        duration:0.3,
                        to:{snowflakeVCenter: finalVcenter, snowflakeBlurVal: 14, snowflakeAlpha:0},
                        easing:Easing.cubic_out
                    }
                ]"
                id='snowflake'
                callbacks="{onComplete:evHideBurstAnimation}"
                watch=false
                (event "evStart")
            )
            (bindcall stop id='snowflake' 
                (event "evStop")
            )
        )

        (var collectBtnAlpha:number = 0.0)
        (var collectBtnRedAdd:number = 0)
        (var collectBtnGreenAdd:number = 0)
        (bind collectBtnAlpha 0
            (event "evStop")
        )
        (bind collectBtnRedAdd 0
            (event "evStop")
        )
        (bind collectBtnGreenAdd 0
            (event "evStop")
        )

        (controller $Animation
            (bindcall playSeq "[
                    {duration:0.10, to:{collectBtnAlpha:1.0, collectBtnRedAdd:50, collectBtnGreenAdd:50}, easing:Easing.quint_in},
                    {duration:0.08, to:{collectBtnRedAdd:0, collectBtnGreenAdd:0}}
                ]"
                id='collectRewardsBtn'
                callbacks="{onStart:evEnableCollectRewardsBtn}"
                (event "evShowCollectRewardsBtn")
                (enabled = "!hasPSABonus")
            )
            (bindcall stop id='collectRewardsBtn'
                (event "evStop")
            )

            #psa button
            (bindcall playSeq "[
                    {duration:0.10, to:{collectBtnAlpha:1.0, collectBtnRedAdd:50, collectBtnGreenAdd:50}, easing:Easing.quint_in},
                    {duration:0.08, to:{collectBtnRedAdd:0, collectBtnGreenAdd:0}}
                ]"
                id='collectRewardsBtn1'
                callbacks="{onStart:evEnableCollectRewardsBtn}"
                (event "evShowCollectRewardsBtn")
                (enabled = "hasPSABonus && psaRewardsShowed")
            )
            (bindcall stop id='collectRewardsBtn1'
                (event "evStop")
            )
        )
        
        (var baseSnowMaidenScale:number = 1)
        (bind baseSnowMaidenScale "(viewSize.width > BASE_WIDTH_1360 ? (viewSize.height > BASE_HEIGHT_1200 ? 
            (viewSize.height > BASE_HEIGHT_1400 ? 1 : viewSize.height / BASE_HEIGHT_1400) : 
            (viewSize.height > BASE_HEIGHT_960 ? 1 : viewSize.height / BASE_HEIGHT_960)) : 0.8) - 0.12" watch=true init=true
            (event "evShowSnowMaidenComplete")
            (event "viewResized")
        )
        (var snowMaidenAlpha:number = 0.0)
        (var snowMaidenScale:number = "baseSnowMaidenScale")
        (bind snowMaidenScale "baseSnowMaidenScale" watch=true init=true
            (event "evShowSnowMaidenComplete")
            (event "viewResized")
        )
        (var snowMaidenRedAdd:number = 100)
        (var snowMaidenGreenAdd:number = 100)
        (var snowMaidenBlueAdd:number = 100)
        (var snowMaidenBlurVal:number = 20)

        (bind snowMaidenAlpha 0.0
            (event "evStop")
        )
        (bind snowMaidenScale "baseSnowMaidenScale"
            (event "evStop")
        )
        (bind snowMaidenRedAdd 100
            (event "evStop")
        )
        (bind snowMaidenGreenAdd 100
            (event "evStop")
        )
        (bind snowMaidenBlueAdd 100
            (event "evStop")
        )
        (bind snowMaidenBlurVal 20
            (event "evStop")
        )

        (controller $Animation
            (bindcall play
                duration=0.70
                from="{snowMaidenScale:baseSnowMaidenScale-0.01}"
                to="{snowMaidenScale:baseSnowMaidenScale, snowMaidenAlpha:1.0, snowMaidenRedAdd:0, snowMaidenGreenAdd:0, snowMaidenBlueAdd:0, snowMaidenBlurVal:0}"
                callbacks="{onComplete:evShowSnowMaidenComplete}" easing="Easing.sine_in_out" watch=false init=false
                (event "evShowSnowMaiden")
            )
            (bindcall stop
                (event "evStop")
            )
        )
        (controller $Animation
            (bindcall play duration=0.15 to="{snowMaidenRedAdd:10, snowMaidenGreenAdd:20, snowMaidenBlueAdd:20}"
                (event "evSnowMaidenRollOverEvent")
            )
        )
        (controller $Animation
            (bindcall play duration=0.15 to="{snowMaidenRedAdd:0, snowMaidenGreenAdd:0, snowMaidenBlueAdd:0}"
                (event "evSnowMaidenRollOutEvent")
            )
        )
        (var tankSlotAlpha:number = 0.0)
        (var tankSlotScale:number = 0.7)
        (var tankSlotRedAdd:number = 100)
        (var tankSlotGreenAdd:number = 100)
        (var tankSlotBlueAdd:number = 100)
        (var tankSlotBlurVal:number = 10)

        (bind tankSlotAlpha 0.0
            (event "evStop")
        )
        (bind tankSlotScale 0.7
            (event "evStop")
        )
        (bind tankSlotRedAdd 100
            (event "evStop")
        )
        (bind tankSlotGreenAdd 100
            (event "evStop")
        )
        (bind tankSlotBlueAdd 100
            (event "evStop")
        )
        (bind tankSlotBlurVal 10
            (event "evStop")
        )

        (controller $Animation
            (bindcall play duration=0.70
                to="{tankSlotAlpha:1.0, tankSlotScale:1, tankSlotRedAdd:0, tankSlotGreenAdd:0, tankSlotBlueAdd:0, tankSlotBlurVal:0}"
                easing="Easing.cubic_out"
                (event "evOnRewardsAnimationComplete")
            )
            (bindcall stop
                (event "evStop")
            )
        )
        (controller $Animation
            (bindcall play duration=0.15 to="{tankSlotRedAdd:10, tankSlotGreenAdd:20, tankSlotBlueAdd:20}"
                (event "evTankSlotRollOverEvent")
            )
        )
        (controller $Animation
            (bindcall play duration=0.15 to="{tankSlotRedAdd:0, tankSlotGreenAdd:0, tankSlotBlueAdd:0}"
                (event "evTankSlotRollOutEvent")
            )
        )

        (var psaBGAlpha:number = 0)
        (var psaBGScale:number = 1.2)
        (var psaTitleAlpha:number = 1)
        (var psaRewardsOffset:number = 0)
        (var psaAdditionalRewardsOffset:number = 0)
        (bind psaAdditionalRewardsOffset "noAdditionalBonusOffsetRibbon" init=false
            (event "viewResized")
            (enabled = "psaRewardsShowed")
        )
        (var psaRewardsShowed:bool = false)
        (bind psaRewardsShowed true init=false
            (event "evShowPSARewards")
        )
        (bind psaRewardsShowed false init=false
            (event "evStop")
        )
        (var psaBoxOpenedAlpha:number = 0)
        (var showAdditionalRewards:number = 0)
        (var psaTitleOffset:number = 0)

        (var psaSubtitleAlpha:number = 0)
        (var psaBoxAnimationScale:number = 1)
        (bind psaBoxAnimationScale "viewSize.height >= BASE_HEIGHT_1080 && viewSize.width >= BASE_WIDTH_1920 ? 1 :
            (viewSize.height < BASE_HEIGHT_900 || viewSize.width < BASE_WIDTH_1600 ? 0.7 : 0.8)"
            (event "viewResized")
        )

        (controller $Animation 
            (bindcall playSeq 
                "[
                    {duration:0.5, from:{psaRewardsOffset:0, psaTitleAlpha:1, psaAdditionalRewardsOffset:0}, to:{psaRewardsOffset:50, psaTitleAlpha:0, psaAdditionalRewardsOffset:noAdditionalBonusOffsetRibbon}, easing:Easing.expo_in_out},
                    {duration:0.5, from:{psaBGAlpha:0, psaBGScale:1.2}, to:{psaBGAlpha:1, psaBGScale:1}, easing:Easing.cubic_out}
                ]"
                id='psaBonusAnimation1'
                callbacks="{onComplete:evPSAAnimationStop}"
                watch=false init=false
                (event "evOnRewardsAnimationComplete")
                (enabled = "hasPSABonus && !psaRewardsShowed")
            )
            (bindcall play delay=0.6 duration=0.001
                id='psaBonusAnimation2'
                to="{psaBoxOpenedAlpha:1.0}"
                watch=false init=false
                callbacks="{onComplete:evShowOpenPSABoxAnimation}"
                (event "evOnRewardsAnimationComplete")
                (enabled = "hasPSABonus && !psaRewardsShowed")
            )
            (bindcall play delay=1.5 duration=0.5
                id='psaBonusAnimation3'
                from="{psaTitleOffset:0, psaTitleAlpha:0}"
                to="{psaTitleOffset:-40, psaTitleAlpha:1}"
                easing="Easing.cubic_out"
                watch=false init=false
                (event "evOnRewardsAnimationComplete")
                (enabled = "hasPSABonus && !psaRewardsShowed")
            )
            (bindcall play delay=1.8 duration=0.5
                id='psaBonusAnimation4'
                from="{psaSubtitleAlpha:0}"
                to="{psaSubtitleAlpha:1}"
                callbacks="{onComplete:evPSASubtitleShowed}"
                easing="Easing.cubic_out"
                watch=false init=false
                (event "evOnRewardsAnimationComplete")
                (enabled = "hasPSABonus && !psaRewardsShowed")
            )
            (bindcall play delay=0.7 duration=0.001
                id='psaBonusAnimation5'
                to="{showAdditionalRewards:1}"
                callbacks="{onComplete:evShowPSARewards}"
                watch=false init=false
                (event "evPSASubtitleShowed")
                (enabled = "hasPSABonus && !psaRewardsShowed")
            )
            (bindcall stop id='psaBonusAnimation1' 
                (event "evStop")
            )
            (bindcall stop id='psaBonusAnimation2' 
                (event "evStop")
            )
            (bindcall stop id='psaBonusAnimation3' 
                (event "evStop")
            )
            (bindcall stop id='psaBonusAnimation4' 
                (event "evStop")
            )
            (bindcall stop id='psaBonusAnimation5' 
                (event "evStop")
            )
        )
    )

    (style 
        (macro ViewResizeBindedSize)
    )
    (tabEnabled = true)

    # sounds
    (exec "playSound(R.sounds.gui_random_reward_end())"
        (bind enabled "changeShinePosition")
    )
    (exec "playSound(R.sounds.gui_random_reward_end())"
        (event "evStop")
        (enabled = "!changeShinePosition")
    )
    (exec "playSound(R.sounds.gui_hangar_award_christmas_box())"
        (event "evShowOpenPSABoxAnimation")
        (enabled = "hasPSABonus && !psaRewardsShowed")
    )

    (block
        (name = 'backgroundBlock')
        (style
            (alpha = 0)
            (bind alpha "bgBlockAlpha")
        )

        (block
            (name = 'mainBackgroundLayer')
            (element BackgroundElement fullHeight=true
                (scope
                    (widthCoef = 1.1)
                    (heightCoef = 1.1)
                    (controller $Animation 
                        (bindcall play
                            delay="LEFT_SHIFT_TIMING_TOP"
                            duration=0.8
                            to="{hValue:70}"
                            easing="Easing.sine_in_out" watch=false
                            (event "evLeftShift")
                            (enabled="containsTalisman")
                        )
                        (bindcall stop
                            (event "evStop")
                        )
                    )
                    (bgSource = "R.images.gui.maps.icons.new_year.level_up_view.ny_background_sm()") 
                    (bind hValue "0" init=false
                        (event "evStop")
                    )
                )
            )
            (element BackgroundElement fullHeight=true
                (style
                    (alpha = 0)
                    (bind alpha "0" init=false
                        (event "evStop")
                    )
                    (bind alpha "psaBGAlpha" init=false
                        (bind enabled "hasPSABonus")
                    )
                )
                (scope
                    (bind widthCoef "psaBGScale")
                    (bind heightCoef "psaBGScale")

                    (bgSource = "R.images.gui.maps.icons.new_year.level_up_view.ny_background_psa()") 
                )
            )
        )

        (mc 'NYLevelUpPSABoxOpenAnimation'
            (name = 'levelUpPSABoxOpenAnimation')
            (visible = false)
            (style
                (position = "absolute")
                (hcenter = -380px)
                (vcenter = -150px)
                (bind width "1197px * psaBoxAnimationScale"
                    (event "viewResized")
                )
                (bind height "776px * psaBoxAnimationScale"
                    (event "viewResized")
                )
                (bind scaleX "psaBoxAnimationScale"
                    (event "viewResized")
                )
                (bind scaleY "psaBoxAnimationScale"
                    (event "viewResized")
                )
                (pivotX = 50%)
                (pivotY = 50%)
            )
            (bind visible false init=true
                (event "evStop")
            )
            (bind visible true init=false
                (event "evShowOpenPSABoxAnimation")
            )
            (stop)
            (bindcall gotoAndPlay 1
                (event "evShowOpenPSABoxAnimation")
            )
            (bindcall stop
                (event "evStop")
            )
            (mouseEnabled = false)
            (mouseChildren = false)
        )
        

        (image
            (name = 'iceVignetteLayer')
            (style
                (blendMode = 'add')

                (macro ViewResizeBindedSize)
            )
            (source = "R.images.gui.maps.icons.new_year.level_up_view.ny_ice()")
            (bind visible "!containsTalisman")
        )
    )

    (mc 'NYLevelUpBurstAnimation'
        (style
            (position = "absolute")
            (left = 50%)
            (top = 50%)
        )
        (stop)
        (visible = true)
        (bind visible false init=false
            (event "evStop")
            (event "evHideBurstAnimation")
        )
        (bind visible true init=false
            (event "evStart")
        )
        (bindcall gotoAndPlay 'start'
            (event "evStart")
        )
        (bindcall stop
            (event "evHideBurstAnimation")
        )
        (mouseEnabled = false)
        (mouseChildren = false)
    )

    (image
        (name = 'bigShineImage')
        (style
            (position = "absolute")
            (hcenter = 0px)
            (bind vcenter "snowflakeVCenter")
            (pivotX = 50%)
            (pivotY = 50%)
        )

        (controller $Animation
            (bindcall play duration=0.20 from={alpha:0, scaleX:0.8, scaleY:0.8} to={alpha:1.0, scaleX:1.5, scaleY:1.5} easing="Easing.sine_in_out" init=false 
                (event "evStart")
            )
            (bindcall stop
                (event "evStop")
            )
        )
        (controller $Animation
            (bindcall play duration=0.50 to={alpha:0, scaleX:0.8, scaleY:0.8} easing="Easing.sine_in_out" callbacks="{onComplete:evHideBigShineComplete}" init=false 
                (event "evHideShine")
            )
        )
        (controller $Animation
            (bindcall play delay=1.1 duration=2.4 from={alpha:0} to={alpha:1.0, scaleX:2, scaleY:2} easing="Easing.sine_in_out" callbacks="{onComplete:evShineSlotComplete}"
                (event "evShowCollectRewardsBtn")
                (enabled = "hasVehicleBranch")
            )
            (bindcall stop
                (event "evStop")
            )
        )

        (bind visible false init=true
            (event "evStop")
        )
        (bind visible true init=false
            (event "evStart")
        )

        (source = "R.images.gui.maps.icons.new_year.level_up_view.big_blue_shine()")
        (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_MIDDLE")
    )

    (block
        (name = 'levelContainer')
        (style
            (position = "absolute")
            (hcenter = 0px)
            (bind vcenter "snowflakeVCenter")
            (bind alpha "snowflakeAlpha")
            (bind scaleX "snowflakeScale")
            (bind scaleY "snowflakeScale")
            (pivotX = 50%)
            (pivotY = 50%)
        )

        (image
            (name = 'blueBG')
            (class AbsPositionCenterStyle)
            (style
                (pivotX = 50%)
                (pivotY = 50%)
            )
            (source = "R.images.gui.maps.icons.new_year.level_up_view.blue_background()")
        )
        (mc 'BlueShineAnimUI'
            (name = 'CircleBlueShineAnimUI')
            (class AbsPositionCenterStyle)
            (style
                (pivotX = 50%)
                (pivotY = 50%)
                (blendMode = 'screen')
                
            )
            (visible = false)
            (bind visible false init=true
                (event "evStop")
            )
            (bind visible true init=false
                (event "evStart")
            )
            (stop)

            (controller $Animation
                (bindcall play duration=0.30 from={alpha:0, scaleX:0.8, scaleY:0.8} to={alpha:1.0, scaleX:2, scaleY:2} easing="Easing.quint_in" init=false
                    (event "evStart")
                )
                (bindcall stop
                    (event "evStop")
                )
            )
            
            (bindcall gotoAndPlay 1
                (event "viewResized")
                (event "evStart")
            )
            (bindcall stop
                (event "evStop")
                (event "evHideBurstAnimation")
            )
            (mouseEnabled = false)
            (mouseChildren = false)
        )
        (swf
            (name = 'levelUpRoundAnimation')
            (source = "R.animations.ny.levelUpWindowLevelAnimation()")
            (bindcall stop 
                (event "evStop")
                (event "evHideBurstAnimation")
            )
            (bind visible false init=true
                (event "evStop")
            )
            (bind visible true init=false
                (event "evStart")
            )

            (dispatch evCircleAnimationLoaded on='complete')
        )
        (image
            (name = 'levelImage')
            (class AbsPositionCenterStyle)
            (style
                (pivotX = 50%)
                (pivotY = 50%)
                (filters
                    (blur
                        (bind blurX "snowflakeBlurVal")
                        (bind blurY "snowflakeBlurVal")
                        (quality = 2)
                    )
                )
            )
            (bind colorTransform "{redOffset:snowflakeRedAdd, greenOffset:snowflakeGreenAdd, blueOffset:snowflakeBlueAdd}")
            (bind visible false init=true
                (event "evStop")
            )
            (bind visible true init=false
                (event "evStart")
            )
            (bind source "R.images.gui.maps.icons.new_year.level_up_view['levels' + (isRomanNumbersAllowed ? '' : '_alt')]['level' + level]()"
                init=false
                (enabled = "level > 0")
            )
        )
        (image
            (name = 'levelCircleImage')
            (class AbsPositionCenterStyle)
            (style
                (pivotX = 50%)
                (pivotY = 50%)
                (filters
                    (blur
                        (bind blurX "snowflakeBlurVal")
                        (bind blurY "snowflakeBlurVal")
                        (quality = 2)
                    )
                )
            )
            (bind colorTransform "{redOffset:snowflakeRedAdd, greenOffset:snowflakeGreenAdd, blueOffset:snowflakeBlueAdd}")
            (bind visible false init=true
                (event "evStop")
            )
            (bind visible true init=false
                (event "evStart")
            )
            (source = "R.images.gui.maps.icons.new_year.level_up_view.emitter_ring()")
        )
        (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_MIDDLE" shiftValue=-20)
    )

    (block
        (name = 'rewardsBlock')
        (style
            (width = 100%)
            (position = "absolute")
            (hcenter = 0px)
            (bind vcenter "finalVcenter + (hasVehicleBranch ? 0 : -noAdditionalBonusOffsetRibbon) + psaRewardsOffset + psaAdditionalRewardsOffset")
        )
        (bind visible true
            (event "evShowRewards")
        )
        (bind visible false init=false
            (event "evStop")
        )        
        (block
            (style
                (position = "absolute")
                (hcenter = 0px)
                (vcenter = "FINAL_VCENTER_TANK")
                (pivotX = 50%)
                (pivotY = 50%)
            )
            (buttonMode = true)
            (name = 'tankSlotImage')

            (mc 'BlueShineAnimUI'
                (name = 'BlueShineAnimUI')
                (class AbsPositionCenterStyle)
                (style
                    (pivotX = 50%)
                    (pivotY = 50%)
                )
                (visible = false)
                (bind visible true init=false
                    (event "evStart")
                    (event "evOnRewardsAnimationComplete")
                )
                (bind visible "hasVehicleBranch" init=false
                    (event "evOnRewardsAnimationComplete")
                )
                (bind visible false init=true
                    (event "evHideShineComplete")
                    (event "evStop")
                )
                (stop)

                (controller $Animation
                    (bindcall play duration=0.20 from={alpha:0, scaleX:0.8, scaleY:0.8} to={alpha:1.0, scaleX:2, scaleY:2} easing="Easing.quint_in" init=false
                        (event "evStart")
                    )
                    (bindcall stop
                        (event "evStop")
                        (event "evHideShineComplete")
                    )
                )
                (controller $Animation
                    # Here we need this dummy delay because of bug with extinction of the animation after resize
                    (bindcall play delay=0.15 duration=0.20 from={alpha:0, scaleX:0.8, scaleY:0.8} to={alpha:1.0, scaleX:2, scaleY:2} easing="Easing.quint_in" init=false
                        (event "evOnRewardsAnimationComplete")
                        (event "viewResized")
                        (enabled = "hasVehicleBranch")
                    )
                    (bindcall stop
                        (event "evStop")
                    )
                )
                (controller $Animation
                    (bindcall play duration=0.20 to={alpha:0, scaleX:0.8, scaleY:0.8} easing="Easing.quint_in" init=false callbacks="{onComplete:evHideShineComplete}"
                        (event "evHideShine")
                    )
                )
                (bindcall gotoAndPlay 1
                    (event "evShowBurstAnimation")
                    (event "viewResized")
                )
                (mouseEnabled = false)
                (mouseChildren = false)
                (bind visible false init=false
                    (event "evStop")
                )
            )

            (image
                (style
                    (bind alpha "tankSlotAlpha")
                    (filters
                        (blur
                            (bind blurX "tankSlotBlurVal")
                            (bind blurY "tankSlotBlurVal")
                            (quality = 2)
                        )
                    )
                )
                (bind colorTransform "{redOffset:tankSlotRedAdd, greenOffset:tankSlotGreenAdd, blueOffset:tankSlotBlueAdd}")
                (bind source "R.images.gui.maps.icons.new_year.tank_slot['slots' + (isRomanNumbersAllowed ? '' : '_alt')].big['slot_' + level].exists()
                                ? R.images.gui.maps.icons.new_year.tank_slot['slots' + (isRomanNumbersAllowed ? '' : '_alt')].big['slot_' + level]()
                                : ''" init=false)
            )
            (visible = false)
            (bind visible "false" init=true
                (event "evStop")
            )
            (bind visible "hasVehicleBranch" init=false watch=false
                (event "evOnRewardsAnimationComplete")
            )
            (element HitArea
                (name = 'hoverArea')
                (class AbsPositionCenterStyle)
                (style
                    (pivotX = 50%)
                    (pivotY = 50%)
                    (width = 210px)
                    (height = 210px)
                )
            )
            (hitArea = "$target.hoverArea")
            (dispatch onToTanks on='click'
                (enabled = "hasVehicleBranch")
            )
            (dispatch evTankSlotRollOverEvent on='rollOver'
                (enabled = "hasVehicleBranch")
            )
            (dispatch evTankSlotRollOutEvent on='rollOut'
                (enabled = "hasVehicleBranch")
            )
            (controller $ToolTip
                (delay = "0.4")
                (content = "R.views.lobby.new_year.tooltips.new_year_tank_slot_tooltip.NewYearTankSlotTooltipContent.resId")
                (decorator = "R.views.common.tooltip_window.tooltip_window.TooltipWindow.resId")
            )
            (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_MIDDLE")
        )
        (element RewardsRibbon
            (name = 'rewards')
            (style
                (width = 100%)
                (position = "absolute")
                (bind vcenter "viewSize.height > BASE_HEIGHT_960 ? 100 : 70" 
                    (event "viewResized")
                )
            )
            (scope
                (bind isOpenBoxAnimPlayed false init=false
                    (event "evStop")
                )
                (bind isOpenBoxAnimPlayed true init=false
                    (event "evShowRewards")
                )
                (canShowCongratsImg = true)
                (bind isFadeIn true init=false
                    (event "evShowRewards")
                )
                (bind isFadeIn false init=false
                    (event "evStop")
                )
                (bind isReadyForRestart false init=true
                    (event "evStart")
                )
                (bind isReadyForRestart true init=false
                    (event "evStop")
                )
                (showCongratsTitle = false)
                (bind rewards "rewards")
                (customRibbonImg = "R.images.gui.maps.icons.new_year.style_reward.ny_ribbon()")
                (customRibbonTopOffset = -140px)
                (isNYRibbonAnimation = true)
                (bind additionalRewards "additionalRewards")
                (bind showAdditionalRewards true init=false
                    (event "evShowPSARewards")
                    (enabled = "hasPSABonus")
                )
                (bind showAdditionalRewards false init=false
                    (event "evStop")
                )
            )
            (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_RIBBON")
        )
        (hblock
            (name = 'footerButtonsBlock')
            (style
                (align = "middle")
                (bind alpha "collectBtnAlpha")
                (position = "absolute")
                (hcenter = 0px)
                (hgap = 20px)
                (maxWidth = 400px)
                (bind vcenter "viewSize.height > BASE_HEIGHT_960 ? 300 : 200" 
                    (event "viewResized")
                )
            )

            (bind colorTransform "{redOffset:collectBtnRedAdd, greenOffset:collectBtnGreenAdd}")
            (button
                (name = 'okBtn')
                (macro ButtonStylePrimary "BUTTON_SIZE_MEDIUM")
                (style
                    (minWidth = 150px)
                    (minHeight = 30px)
                )
                (label = "R.strings.ny.levelUpView.okBtn.label()")

                (dispatch onClose on='clicked')
                (visible = true)
                (bind visible true init=false
                    (event "evStart")
                )
                (bind visible false init=false
                    (event "evStop")
                )
                (bind enabled true init=false
                    (event "evEnableCollectRewardsBtn")
                )
                (bind enabled false init=true
                    (event "evStop")
                )
                (bindcall setFocus
                    (event "evEnableCollectRewardsBtn")
                )
            )
            (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_BOTTOM")
        )
    )

    (block
        (name = 'snowMaidenBlock')
        (style
            (position = "absolute")
            (bind alpha "snowMaidenAlpha")
            (bind vcenter "baseSnowMaidenScale > 0.8  ? -40 : -150")
            (bind hcenter "baseSnowMaidenScale > 0.8 ? 300*baseSnowMaidenScale+100*baseSnowMaidenScale*baseSnowMaidenScale : 220*baseSnowMaidenScale" init=true
                (event "evShowSnowMaidenComplete")
                (event "viewResized")
            )
            (bind scaleX "snowMaidenScale")
            (bind scaleY "snowMaidenScale")
            (pivotX = 100%)
            (pivotY = 100%)
        )
        (buttonMode = true)
        (image
            (name = 'snowmaidenFogBack')
            (style
                (position = "absolute")
            )
            (source = "R.images.gui.maps.icons.new_year.level_up_view.snowmaidens_fog_back()"
                (bind enabled "talismanSetting != ''")
            )
        )
        (image
            (name = 'snowMaidenImage')
            (style
                (filters
                    (blur
                        (bind blurX "snowMaidenBlurVal")
                        (blurY = 0)
                        (quality = 2)
                    )
                )
            )
            (bind colorTransform "{redOffset:snowMaidenRedAdd, greenOffset:snowMaidenGreenAdd, blueOffset:snowMaidenBlueAdd}")
            (bind source "R.images.gui.maps.icons.new_year.level_up_view[talismanSetting]()"
                (bind enabled "talismanSetting != ''")
            )
        )
        (image
            (name = 'snowmaidenFogFront')
            (style
                (position = "absolute")
                (blendMode = 'screen')
            )
            (source = "R.images.gui.maps.icons.new_year.level_up_view.snowmaidens_fog_front()"
                (bind enabled "talismanSetting != ''")
            )
        )
        (visible = false)
        (bind visible "containsTalisman" init=false watch=false
            (event "evShowSnowMaiden")
        )
        (bind visible false init=true
            (event "evStop")
        )
        (element HitArea
            (name = 'hoverArea')
            (style
                (position = "absolute")
                (bind hcenter "450 * snowMaidenScale")
                (bind top "viewSize.height > BASE_HEIGHT_960 ? 50 : 100"
                    (event "evShowSnowMaidenComplete")
                    (event "viewResized")
                )
                (bind scaleX "viewSize.width > BASE_WIDTH_1366 ? snowMaidenScale * 0.4 : snowMaidenScale * 0.45" watch=true init=true
                    (event "evShowSnowMaidenComplete")
                    (event "viewResized")
                )
                (bind scaleY "snowMaidenScale > BASE_HEIGHT_960 ? snowMaidenScale * 0.9 : snowMaidenScale" watch=true init=true
                    (event "evShowSnowMaidenComplete")
                    (event "viewResized")
                )
            )
        )
        (dispatch onToTalismans on='click'
            (enabled = "containsTalisman")
        )
        (dispatch evSnowMaidenRollOverEvent on='rollOver'
            (enabled = "containsTalisman")
        )
        (dispatch evSnowMaidenRollOutEvent on='rollOut'
            (enabled = "containsTalisman")
        )
        (hitArea = "$target.hoverArea")
        (controller $ToolTip
            (delay = "0.4")
            (args idx="level")
            (content = "R.views.lobby.new_year.tooltips.ny_talisman_tooltip.NewYearTalismanTooltipContent.resId")
            (decorator = "R.views.common.tooltip_window.tooltip_window.TooltipWindow.resId")
        )
    )

    (block
        (style
            (width = 100%)
            (position = "absolute")
            (hcenter = 0px)
            (bind vcenter "finalVcenter + (hasVehicleBranch ? 0 : noAdditionalBonusOffsetTitle) - psaRewardsOffset + psaTitleOffset")
        )
        (bind visible true
            (event "evShowRewards")
        )
        (bind visible false init=false
            (event "evStop")
        )  

        (tf
            (name = 'congratsTextHeader')
            (style
                (position = "absolute")
                (hcenter = 0px)
                (bind vcenter "finalHeaderPosition" watch=true init=true
                    (event "viewResized")
                    (event "evShowTextHeaderComplete")
                )
                (bind alpha "psaTitleAlpha" init=false
                    (enabled = "hasPSABonus")
                )
            )
            (visible = false)
            (bind visible "false" init=false
                (event "evStop")
            )
            (bind visible "true" init=false
                (event "evHideCongratsText")
            )
            (bind class "(level == 1) && (viewSize.height < BASE_HEIGHT_900 || viewSize.width <  BASE_WIDTH_1600) ? 'HeroTitleTextStyle' : 'EpicTitleTextStyle'"
                (event "viewResized")
            )
            (bind text "level > 1 ? R.strings.ny.levelUpView.rewards.title() : R.strings.ny.levelUpView.rewards.specialTitle()")
            (bind text "R.strings.ny.levelUpView.rewards.psaTitle()" init=false
                (event "evShowOpenPSABoxAnimation")
            )
            (controller $Animation
                (bindcall play delay=0.3 duration=0.40 from="{alpha:0, vcenter:finalHeaderPosition + 40}" to="{alpha:1.0, vcenter:finalHeaderPosition}"
                 easing="Easing.cubic_out" watch=false callbacks="{onComplete:evShowTextHeaderComplete}"
                    (event "evHideCongratsText")
                )
                (bindcall stop
                    (event "evStop")
                )
            ) 
            (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_TOP")
        )
        (tf
            (name = 'congratsTextSubHeader')
            (style
                (position = "absolute")
                (hcenter = 0px)
                (multiline = true)
                (textAlign = "center")
                (bind maxWidth "isLarge ? 750px : 650px")
                (bind top "finalHeaderPosition + 53"
                    (event "evShowTextSubHeaderComplete")
                )
                (bind alpha "psaSubtitleAlpha" init=false
                    (enabled = "hasPSABonus")
                )
                (bind alpha 0 init=false
                    (event "evShowOpenPSABoxAnimation")
                    (enabled = "hasPSABonus")
                )
            )
            (visible = false)
            (bind visible "false" init=false
                (event "evStop")
            )
            (bind visible "hasVehicleBranch || containsTalisman" init=false watch=false
                (event "evOnRewardsAnimationComplete")
                (enabled = "!hasPSABonus")
            )
            (bind visible "true" init=false watch=false
                (event "evShowOpenPSABoxAnimation")
                (enabled = "hasPSABonus")
            )

            (bind class "isLarge ? 'SuperPromoTitleTextStyle' : 'PromoSubTitleTextStyle'")
            (bind text "hasVehicleBranch
                ? (containsTalisman
                        ? TextFormat(R.strings.ny.levelUpView.rewards.description.primary.ifTalisman(), {level:levelName})
                        : TextFormat(R.strings.ny.levelUpView.rewards.description.primary(), {level:levelName})
                  )
                : R.strings.ny.levelUpView.rewards.description.ifTalisman()"
                init=false
            )

            (bind text "R.strings.ny.levelUpView.rewards.description.primary.psa()" init=false
                (event "evShowOpenPSABoxAnimation")
                (enabled = "hasPSABonus")
            )

            (controller $Animation
                (bindcall play
                    delay=0.3 duration=0.40
                    from="{alpha:0, top: finalHeaderPosition + 63}"
                    to="{alpha:1.0, top: finalHeaderPosition + 53}"
                    easing="Easing.cubic_out" watch=false 
                    callbacks="{onComplete:evShowTextSubHeaderComplete}"
                    (event "evOnRewardsAnimationComplete")
                    (enabled = "(hasVehicleBranch || containsTalisman) && !hasPSABonus")
                )
                (bindcall stop
                    (event "evStop")
                )
            )
            (macro LeftIfTalismanShiftAnimation delay="LEFT_SHIFT_TIMING_TOP")
        )
    )

    (element NewYearLevelUpViewTextBlock "R.strings.ny.levelUpView.congrats()" 'SuperPromoTitleTextStyle'
        (name = 'congratsText')
        (style
            (position = "absolute")
            (hcenter = 0px)
            (vcenter = 225px)
        )
        (scope 
            (bind startShow true init=false
                (event "evShowCongratsText")
            )
            (bind startHide true init=false
                (event "evHideCongratsText")
                (event "evStop")
            )
            (bind startShow false init=false
                (event "evStop")
            )
            (bind startHide false init=false
                (event "evStart")
            )
        )
        (bind visible false init=false
            (event "evStop")
        )
        (mouseEnabled = false)
        (mouseChildren = false)
    )

    (mc 'NYWindAnimation'
        (style
            (position = "absolute")
            (vcenter = 0)
        )
        (stop)
        (visible = false)
        (bind visible true init=false
            (event "evShowWind")
        )
        (bindcall gotoAndPlay 1
            (event "evShowWind")
        )
        (mouseChildren = false)
        (mouseEnabled = false)
    )

    (mc 'NYLevelUpSnowAnimation'
        (style
            (position = "absolute")
            (left = 50%)
            (top = 25%)
        )
        (stop)
        (visible = false)
        (bind visible false init=false
            (event "evStop")
        )
        (bind visible true init=false
            (event "evShowCongratsText")
        )
        (bindcall gotoAndPlay 1
            (event "evShowCongratsText")
        )
        (mouseChildren = false)
        (mouseEnabled = false)
    )

    (text_button 'closeBtn'
        (macro ButtonCloseStyle)
        (style
            (position = "absolute")
            (right = 40px)
            (top = 40px)
            (alpha = 0)
        )
        (label = "R.strings.menu.viewHeader.closeBtn.label()")
        (dispatch onClose on='clicked')
        (enabled = false)
        (bind enabled true init=false
            (event "evShowCollectRewardsBtn")
        )
        (controller $Animation
            (bindcall play duration=0.2 to={alpha:1}
                (event "evShowCollectRewardsBtn")
            )
        )
        (bind alpha 0 init=false
            (event "evStop")
        )
        (bind enabled false init=false
            (event "evStop")
        )
        (bindcall setFocus
            (event "evStop")
        )
    )

    (dispatch onClose on='escPressed'
        (enabled = "closeEnabled")
    )
)

(def element NewYearLevelUpViewTextBlock(txt:str, className:str) layout=true
    (scope
        (var startShow:bool = false)
        (var startHide:bool = false)
        (var textAlpha:number = 0)
        (event __evStartShow)
        (event __evStartHide)
        (event __evEndHide)

        (dispatch __evStartShow
            (bind trigger "startShow")
            (bind enabled "startShow")
        )
        (dispatch __evStartHide
            (bind trigger "startHide")
            (bind enabled "startHide")
        )
    )
    (mc 'NYLevelUpTextHighlightAnimation'
        (style
            (position = "absolute")
            (left = 50%)
            (top = 50%)
        )
        (stop)
        (bindcall gotoAndPlay 1
            (event "__evStartShow")
        )
    )
    (tf
        (style
            (pivotX = 50%)
            (pivotY = 50%)
            (alpha = 0)
        )
        (bind class "className")
        (text = "txt")
        (controller $Animation
            (bindcall playSeq "[
                    {duration:0.24, from:{alpha:0.0}, to:{alpha:1.0, scaleX:1.05, scaleY:1.05}, easing:Easing.quint_in},
                    {duration:0.04, to:{scaleX:1.0, scaleY:1.0}}
                ]"
                (event "__evStartShow")
            )
        )

        (controller $Animation
            (bindcall play duration=0.3 from={alpha:1.0} to={alpha:0.0} callbacks="{onComplete:__evEndHide}"
                (event "__evStartHide")
            )
        )
    )
    (bind visible false init=false
        (event "__evEndHide")
    )
    (bind visible true init=false
        (event "__evStartShow")
    )
)

# Works only with absolute position
(def macro LeftIfTalismanShiftAnimation(delay:expression="0", duration:number=0.5, shiftValue:number=-140)
    (controller $Animation
        (bindcall play
            delay="delay" duration="duration"
            to="{hcenter:viewSize.width > BASE_WIDTH_1366 ? shiftValue - 20 : shiftValue}"
            easing="Easing.sine_in_out"
            (event "evLeftShift")
            (enabled="containsTalisman")
        )
        (bindcall stop
            (event "evStop")
        )
    )
    (style
        (bind hcenter "0" init=false
            (event "evStop")
        )
    )
)

(def macro _TimerWrkarnd(delay:expression, evComplete:expression, evStart:expression, evStop:expression, id:expression, 
                    fromExpr:expression = "{tmpVal:0}", toExpr:expression = "{tmpVal:0}", condition:expression = "true")
    (controller $Animation
        (bindcall play id="id" duration="delay" from="fromExpr" to="toExpr" callbacks="{onComplete:evComplete}"
            (event "evStart")
        )
        (bindcall stop id="id"
            (event "evStop")
        )
        (bind enabled "condition")
    )
)